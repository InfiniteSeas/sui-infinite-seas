aggregates:
  Item:
    module: "Common"
    metadata:
      Preprocessors: ["MOVE_CRUD_IT"]
      #CRUD_IT_NO_UPDATE: true
      CRUD_IT_NO_DELETE: true
      ShouldIssuePublisherObject: true
    id:
      name: ItemId
      type: u32
      generator:
        class: assigned
        tableName: ItemTable
    properties:
      Name:
        type: AsciiString
        length: 100
      #Type:
      #  type: ItemType
      RequiredForCompletion:
        type: bool
      SellsFor:
        type: u32
    methods:
      Create:
        requiredPermission: "__Publisher__"
        event:
          isObjectShared: true # Share the object after created.
      Update:
        requiredPermission: "__Publisher__"


singletonObjects:
  ExperienceTable:
    module: "Common"
    properties:
      Levels:
        itemType: ExperienceLevel
    methods:
      "__Init__":
        event:
          isObjectShared: true # Share the object after initialization.
      AddLevel:
        requiredPermission: "__Publisher__"
        parameters:
          Level:
            type: u16
          Experience:
            type: u32
          Difference:
            type: u32
        event:
          name: ExperienceLevelAdded
      UpdateLevel:
        requiredPermission: "__Publisher__"
        parameters:
          Level:
            type: u16
          Experience:
            type: u32
          Difference:
            type: u32
        event:
          name: ExperienceLevelUpdated


valueObjects:
  SkillTypeItemIdPair:
    module: "Common"
    properties:
      SkillType:
        type: SkillType
      ItemId:
        type: u32

  SkillTypePlayerIdPair:
    module: "Common"
    properties:
      SkillType:
        type: SkillType
      PlayerId:
        type: address

  ExperienceLevel:
    module: "Common"
    properties:
      Level:
        type: u16
      Experience:
        type: u32
      Difference:
        type: u32

  ProductionMaterials:
    module: "Common"
    properties:
      Items:
        itemType: ProductionMaterial
        isList: true
    methods:
      New:
        isConstructor: true
        parameters:
          MaterialItemId_1:
            type: u32
          MaterialQuantity_1:
            type: u32
          MaterialItemId_2:
            type: u32
            optional: true
          MaterialQuantity_2:
            type: u32
            optional: true
          MaterialItemId_3:
            type: u32
            optional: true
          MaterialQuantity_3:
            type: u32
            optional: true
          MaterialItemId_4:
            type: u32
            optional: true
          MaterialQuantity_4:
            type: u32
            optional: true
          MaterialItemId_5:
            type: u32
            optional: true
          MaterialQuantity_5:
            type: u32
            optional: true
        implementationLogic:
          Move: >-
            let items = std::vector::empty();
                    std::vector::push_back(
                        &mut items,
                        infinite_sea_common::production_material::new(material_item_id_1, material_quantity_1)
                    );
                    if (std::option::is_some(&material_item_id_2)) {
                        std::vector::push_back(
                            &mut items,
                            infinite_sea_common::production_material::new(
                                std::option::extract(&mut material_item_id_2),
                                std::option::extract(&mut material_quantity_2)
                            )
                        );
                    };
                    if (std::option::is_some(&material_item_id_3)) {
                        std::vector::push_back(
                            &mut items,
                            infinite_sea_common::production_material::new(
                                std::option::extract(&mut material_item_id_3),
                                std::option::extract(&mut material_quantity_3)
                            )
                        );
                    };
                    if (std::option::is_some(&material_item_id_4)) {
                        std::vector::push_back(
                            &mut items,
                            infinite_sea_common::production_material::new(
                                std::option::extract(&mut material_item_id_4),
                                std::option::extract(&mut material_quantity_4)
                            )
                        );
                    };
                    if (std::option::is_some(&material_item_id_5)) {
                        std::vector::push_back(
                            &mut items,
                            infinite_sea_common::production_material::new(
                                std::option::extract(&mut material_item_id_5),
                                std::option::extract(&mut material_quantity_5)
                            )
                        );
                    };
                    {_INSTANTIATE_STRUCT_}

  ProductionMaterial:
    module: "Common"
    properties:
      ItemId:
        type: u32
      Quantity:
        type: u32
        #1  Copper Ore
        #1  Tin Ore


enumObjects:
  SkillType:
    module: "Common"
    baseType: u8
    values:
      Farming:
        value: 0
      Woodcutting:
        value: 1
      Fishing:
        value: 2
      Mining:
        value: 3
      Smithing:
        value: 4
      Cooking:
        value: 5
      Crafting:
        value: 6
      Township:
        value: 7
      #Thieving:
      #  value: xxx

#  IslandResourceType:
#    module: "Common"
#    baseType: u8
#    values:
#      Seed:
#        value: 0
#      Wood:
#        value: 1
#      Fish:
#        value: 2
#      Mineral:
#        value: 3

#  ItemType:
#    module: "Common"
#    baseType: u8
#    values:
#      Logs:
#        value: 0

