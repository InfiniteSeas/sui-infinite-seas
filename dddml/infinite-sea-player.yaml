aggregates:
  Player:
    #module: "Player"
    metadata:
      #Preprocessors: [ "MOVE_CRUD_IT" ]
      #CRUD_IT_NO_UPDATE: true
      #CRUD_IT_NO_DELETE: true
      #NO_MOVE_EVENT_MODULE: true
      ShouldIssuePublisherObject: true
      MOVE_AGGREGATE_MODULE_ATTRIBUTES: "#[allow(unused_mut_parameter, unused_use)]"
      DataAccessFriends:
        - Roster.PutInShipInventory
        - Roster.TakeOutShipInventory
    friends:
      - SkillProcess.StartProduction
      - SkillProcess.CompleteProduction
      - SkillProcess.StartShipProduction
      - SkillProcess.CompleteShipProduction
      - SkillProcess.StartCreation
      - SkillProcess.CompleteCreation
      #- SkillProcess.StartMutexCreation
      #- SkillProcess.CompleteMutexCreation
    id:
      name: Id
      type: UID
    properties:
      Owner:
        type: address
      Level:
        type: u16
        defaultLogic:
          Move: "1"
      Experience:
        type: u32
        defaultLogic:
          Move: "0"
      ClaimedIsland:
        type: Coordinates
        optional: true
        defaultLogic:
          Move: "std::option::none()"
      Inventory:
        itemType: ItemIdQuantityPair
      #UnassignedShips:
      #  itemType: ID # Ship ID
      #  defaultLogic:
      #    Move: "std::vector::empty()"
      #Items:
      #  itemType: PlayerItem
      #Nickname:
      #  type: AsciiString
      #  length: 50
      #Intro:
      #  type: String
      #  length: 350

#    entities:
#      PlayerItem:
#        id:
#          name: ItemId
#          type: u32
#        properties:
#          Quantity:
#            type: u32

    methods:
      Create:
        isCreationCommand: true
        event:
          isObjectShared: true # Share the object after created.
          name: PlayerCreated
          properties:
            Owner:
              type: address

      ClaimIsland:
        parameters:
          Map:
            referenceType: Map
            isMutableReference: true
            isIgnoredInEvent: true
          Coordinates:
            type: Coordinates
          Clock:
            referenceType: Clock
            isIgnoredInEvent: true
          RosterTable:
            referenceType: RosterTable
            isMutableReference: true
            isIgnoredInEvent: true
        event:
          name: IslandClaimed
          properties:
            ClaimedAt:
              type: u64
        constants:
          ESenderHasNoPermission:
            constantExpression:
              Move: 22
            type: u64
        verificationLogic:
          Move: >
            assert!(sui::tx_context::sender(ctx) == player::owner(player), ESenderHasNoPermission);

      Airdrop:
        requiredPermission: "__Publisher__"
        #requiredPermission: AdminCap
        parameters:
          ItemId:
            type: u32
          Quantity:
            type: u32
        event:
          name: PlayerAirdropped

      DeductItems:
        isInternal: true
        parameters:
          Items:
            itemType: ItemIdQuantityPair
        event:
          name: PlayerItemsDeducted

      IncreaseExperienceAndItems:
        isInternal: true
        parameters:
          Experience:
            type: u32
            description: "Increased experience value"
          Items:
            itemType: ItemIdQuantityPair
          NewLevel:
            type: u16
          #UnassignedShips:
          #  itemType: ID # Ship ID
        event:
          name: PlayerExperienceAndItemsIncreased
