aggregates:
  SkillProcess:
    metadata:
      Preprocessors: ["MOVE_CRUD_IT"]
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_NO_DELETE: true
      NO_MOVE_EVENT_MODULE: true
      ShouldIssuePublisherObject: true
    id:
      name: SkillProcessId
      type: SkillTypePlayerIdPair
      generator:
        class: assigned
        tableName: SkillProcessTable
    properties:
      ItemId:
        type: u32
        defaultLogic:
          Move: "infinite_sea_common::item_id::unused_item()"
      StartedAt:
        type: u64
        defaultLogic:
          Move: "0"
      CreationTime:
        type: u64
        defaultLogic:
          Move: "0"
      Completed:
        type: bool
        defaultLogic:
          Move: "true"
      EndedAt:
        type: u64
        defaultLogic:
          Move: "0"
      EnergyVault:
        type: "Balance<ENERGY>"

    methods:
      Create:
        parameters:
          Player:
            referenceType: Player
            isIgnoredInEvent: true
        event:
          isObjectShared: true # Share the object after created.
        constants:
          EInvalidPlayerId:
            constantExpression:
              Move: 10
            type: u64
          ESenderHasNoPermission:
            constantExpression:
              Move: 22
            type: u64
        verificationLogic:
          Move: >
            assert!(sui::tx_context::sender(ctx) == player::owner(player), ESenderHasNoPermission);
                    let player_id = infinite_sea_common::skill_type_player_id_pair::player_id(&skill_process_id);
                    assert!(player::id(player) == player_id, EInvalidPlayerId);

      #StartCreation: # todo start item creation

      StartProduction:
        parameters:
          Player:
            referenceType: Player
            isMutableReference: true
            isIgnoredInEvent: true
          ItemProduction:
            referenceType: ItemProduction
            #eventPropertyName: ItemProductionId
            isIgnoredInEvent: true
          Clock:
            referenceType: Clock
            isIgnoredInEvent: true
          Energy:
            type: "Balance<ENERGY>"
            eventPropertyName: EnergyCost
        event:
          name: ProductionProcessStarted
          properties:
            ItemId:
              type: u32
            EnergyCost:
              type: u64
            StartedAt:
              type: u64
            CreationTime:
              type: u64
            ProductionMaterials:
              type: ProductionMaterials

      CompleteProduction:
        parameters:
          Player:
            referenceType: Player
            isMutableReference: true
            isIgnoredInEvent: true
          ItemProduction:
            referenceType: ItemProduction
            isIgnoredInEvent: true
          ExperienceTable:
            referenceType: ExperienceTable
            isIgnoredInEvent: true
          Clock:
            referenceType: Clock
            isIgnoredInEvent: true
        event:
          name: ProductionProcessCompleted
          properties:
            ItemId:
              type: u32
            StartedAt:
              type: u64
            CreationTime:
              type: u64
            EndedAt:
              type: u64
            Successful:
              type: bool
            Quantity:
              type: u32
            Experience:
              type: u32
              description: "Increased experience value"
            NewLevel:
              type: u16


  SkillProcessMutex:
    metadata:
      Preprocessors: ["MOVE_CRUD_IT"]
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_NO_DELETE: true
    friends:
#      - SkillProcess.StartMutexProduction
#      - SkillProcess.CompleteMutexProduction
#      - SkillProcess.StartMutexCreation
#      - SkillProcess.CompleteMutexCreation
    id:
      name: PlayerId
      type: ID
      generator:
        class: assigned
        tableName: SkillProcessMutexTable
    properties:
      ActiveSkillType:
        type: SkillType
        optional: true
        defaultLogic:
          Move: "std::option::none()"
    methods:
      Create:
        event:
          isObjectShared: true # Share the object after created.

#      Lock:
#        isInternal: true
#        parameters:
#          SkillType:
#            type: SkillType
#        event:
#          name: SkillProcessMutexLocked
#
#      Unlock:
#        isInternal: true
#        parameters:
#          SkillType:
#            type: SkillType
#        event:
#          name: SkillProcessMutexUnlocked
