// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea::ship_battle {
    use std::option;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea::ship_battle_initiate_battle_logic;
    friend infinite_sea::ship_battle_make_move_logic;
    friend infinite_sea::ship_battle_make_move_after_timeout_logic;
    friend infinite_sea::ship_battle_aggregate;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct ShipBattle has key {
        id: UID,
        version: u64,
        initiator: ID,
        responder: ID,
        status: u8,
        round_number: u32,
        round_mover: u8,
        round_started_at: u64,
    }

    public fun id(ship_battle: &ShipBattle): object::ID {
        object::uid_to_inner(&ship_battle.id)
    }

    public fun version(ship_battle: &ShipBattle): u64 {
        ship_battle.version
    }

    public fun initiator(ship_battle: &ShipBattle): ID {
        ship_battle.initiator
    }

    public(friend) fun set_initiator(ship_battle: &mut ShipBattle, initiator: ID) {
        ship_battle.initiator = initiator;
    }

    public fun responder(ship_battle: &ShipBattle): ID {
        ship_battle.responder
    }

    public(friend) fun set_responder(ship_battle: &mut ShipBattle, responder: ID) {
        ship_battle.responder = responder;
    }

    public fun status(ship_battle: &ShipBattle): u8 {
        ship_battle.status
    }

    public(friend) fun set_status(ship_battle: &mut ShipBattle, status: u8) {
        ship_battle.status = status;
    }

    public fun round_number(ship_battle: &ShipBattle): u32 {
        ship_battle.round_number
    }

    public(friend) fun set_round_number(ship_battle: &mut ShipBattle, round_number: u32) {
        ship_battle.round_number = round_number;
    }

    public fun round_mover(ship_battle: &ShipBattle): u8 {
        ship_battle.round_mover
    }

    public(friend) fun set_round_mover(ship_battle: &mut ShipBattle, round_mover: u8) {
        ship_battle.round_mover = round_mover;
    }

    public fun round_started_at(ship_battle: &ShipBattle): u64 {
        ship_battle.round_started_at
    }

    public(friend) fun set_round_started_at(ship_battle: &mut ShipBattle, round_started_at: u64) {
        ship_battle.round_started_at = round_started_at;
    }

    public(friend) fun new_ship_battle(
        initiator: ID,
        responder: ID,
        status: u8,
        round_mover: u8,
        round_started_at: u64,
        ctx: &mut TxContext,
    ): ShipBattle {
        ShipBattle {
            id: object::new(ctx),
            version: 0,
            initiator,
            responder,
            status,
            round_number: 1,
            round_mover,
            round_started_at,
        }
    }

    struct ShipBattleInitiated has copy, drop {
        id: option::Option<object::ID>,
        initiator_id: ID,
        responder_id: ID,
        started_at: u64,
    }

    public fun ship_battle_initiated_id(ship_battle_initiated: &ShipBattleInitiated): option::Option<object::ID> {
        ship_battle_initiated.id
    }

    public(friend) fun set_ship_battle_initiated_id(ship_battle_initiated: &mut ShipBattleInitiated, id: object::ID) {
        ship_battle_initiated.id = option::some(id);
    }

    public fun ship_battle_initiated_initiator_id(ship_battle_initiated: &ShipBattleInitiated): ID {
        ship_battle_initiated.initiator_id
    }

    public fun ship_battle_initiated_responder_id(ship_battle_initiated: &ShipBattleInitiated): ID {
        ship_battle_initiated.responder_id
    }

    public fun ship_battle_initiated_started_at(ship_battle_initiated: &ShipBattleInitiated): u64 {
        ship_battle_initiated.started_at
    }

    public(friend) fun new_ship_battle_initiated(
        initiator_id: ID,
        responder_id: ID,
        started_at: u64,
    ): ShipBattleInitiated {
        ShipBattleInitiated {
            id: option::none(),
            initiator_id,
            responder_id,
            started_at,
        }
    }

    struct ShipBattleMoveMade has copy, drop {
        id: object::ID,
        version: u64,
        command: u8,
        next_round_started_at: u64,
    }

    public fun ship_battle_move_made_id(ship_battle_move_made: &ShipBattleMoveMade): object::ID {
        ship_battle_move_made.id
    }

    public fun ship_battle_move_made_command(ship_battle_move_made: &ShipBattleMoveMade): u8 {
        ship_battle_move_made.command
    }

    public fun ship_battle_move_made_next_round_started_at(ship_battle_move_made: &ShipBattleMoveMade): u64 {
        ship_battle_move_made.next_round_started_at
    }

    public(friend) fun new_ship_battle_move_made(
        ship_battle: &ShipBattle,
        command: u8,
        next_round_started_at: u64,
    ): ShipBattleMoveMade {
        ShipBattleMoveMade {
            id: id(ship_battle),
            version: version(ship_battle),
            command,
            next_round_started_at,
        }
    }

    struct ShipBattleMoveMadeAfterTimeout has copy, drop {
        id: object::ID,
        version: u64,
        next_round_started_at: u64,
    }

    public fun ship_battle_move_made_after_timeout_id(ship_battle_move_made_after_timeout: &ShipBattleMoveMadeAfterTimeout): object::ID {
        ship_battle_move_made_after_timeout.id
    }

    public fun ship_battle_move_made_after_timeout_next_round_started_at(ship_battle_move_made_after_timeout: &ShipBattleMoveMadeAfterTimeout): u64 {
        ship_battle_move_made_after_timeout.next_round_started_at
    }

    public(friend) fun new_ship_battle_move_made_after_timeout(
        ship_battle: &ShipBattle,
        next_round_started_at: u64,
    ): ShipBattleMoveMadeAfterTimeout {
        ShipBattleMoveMadeAfterTimeout {
            id: id(ship_battle),
            version: version(ship_battle),
            next_round_started_at,
        }
    }


    #[lint_allow(share_owned)]
    public(friend) fun share_object(ship_battle: ShipBattle) {
        assert!(ship_battle.version == 0, EInappropriateVersion);
        transfer::share_object(ship_battle);
    }

    public(friend) fun update_object_version(ship_battle: &mut ShipBattle) {
        ship_battle.version = ship_battle.version + 1;
        //assert!(ship_battle.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_ship_battle(ship_battle: ShipBattle) {
        let ShipBattle {
            id,
            version: _version,
            initiator: _initiator,
            responder: _responder,
            status: _status,
            round_number: _round_number,
            round_mover: _round_mover,
            round_started_at: _round_started_at,
        } = ship_battle;
        object::delete(id);
    }

    public(friend) fun emit_ship_battle_initiated(ship_battle_initiated: ShipBattleInitiated) {
        assert!(std::option::is_some(&ship_battle_initiated.id), EEmptyObjectID);
        event::emit(ship_battle_initiated);
    }

    public(friend) fun emit_ship_battle_move_made(ship_battle_move_made: ShipBattleMoveMade) {
        event::emit(ship_battle_move_made);
    }

    public(friend) fun emit_ship_battle_move_made_after_timeout(ship_battle_move_made_after_timeout: ShipBattleMoveMadeAfterTimeout) {
        event::emit(ship_battle_move_made_after_timeout);
    }

}
