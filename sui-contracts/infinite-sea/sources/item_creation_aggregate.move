// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea::item_creation_aggregate {
    use infinite_sea::item_creation;
    use infinite_sea::item_creation_create_logic;
    use infinite_sea::item_creation_update_logic;
    use infinite_sea_common::skill_type_item_id_pair::{Self, SkillTypeItemIdPair};
    use sui::tx_context;

    public entry fun create(
        item_creation_id_skill_type: u8,
        item_creation_id_item_id: u32,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
        item_creation_table: &mut item_creation::ItemCreationTable,
        ctx: &mut tx_context::TxContext,
    ) {
        let item_creation_id: SkillTypeItemIdPair = skill_type_item_id_pair::new(
            item_creation_id_skill_type,
            item_creation_id_item_id,
        );

        let item_creation_created = item_creation_create_logic::verify(
            item_creation_id,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
            item_creation_table,
            ctx,
        );
        let item_creation = item_creation_create_logic::mutate(
            &item_creation_created,
            item_creation_table,
            ctx,
        );
        item_creation::set_item_creation_created_id(&mut item_creation_created, item_creation::id(&item_creation));
        item_creation::transfer_object(item_creation, tx_context::sender(ctx));
        item_creation::emit_item_creation_created(item_creation_created);
    }

    public entry fun update(
        item_creation: item_creation::ItemCreation,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
        ctx: &mut tx_context::TxContext,
    ) {
        let item_creation_updated = item_creation_update_logic::verify(
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
            &item_creation,
            ctx,
        );
        let updated_item_creation = item_creation_update_logic::mutate(
            &item_creation_updated,
            item_creation,
            ctx,
        );
        item_creation::update_version_and_transfer_object(updated_item_creation, tx_context::sender(ctx));
        item_creation::emit_item_creation_updated(item_creation_updated);
    }

}
