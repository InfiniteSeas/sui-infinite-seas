// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea::skill_process_mutex {
    use std::option::{Self, Option};
    use sui::event;
    use sui::object::{Self, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea::skill_process_mutex_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const EInvalidEnumValue: u64 = 106;
    const EEmptyObjectID: u64 = 107;

    struct SkillProcessMutexTable has key {
        id: UID,
        table: table::Table<address, object::ID>,
    }

    struct SkillProcessMutexTableCreated has copy, drop {
        id: object::ID,
    }

    fun init(ctx: &mut TxContext) {
        let id_generator_table = SkillProcessMutexTable {
            id: object::new(ctx),
            table: table::new(ctx),
        };
        let id_generator_table_id = object::uid_to_inner(&id_generator_table.id);
        transfer::share_object(id_generator_table);
        event::emit(SkillProcessMutexTableCreated {
            id: id_generator_table_id,
        });
    }

    struct SkillProcessMutex has key {
        id: UID,
        player_id: address,
        version: u64,
        active_skill_type: Option<u8>,
    }

    public fun id(skill_process_mutex: &SkillProcessMutex): object::ID {
        object::uid_to_inner(&skill_process_mutex.id)
    }

    public fun player_id(skill_process_mutex: &SkillProcessMutex): address {
        skill_process_mutex.player_id
    }

    public fun version(skill_process_mutex: &SkillProcessMutex): u64 {
        skill_process_mutex.version
    }

    public fun active_skill_type(skill_process_mutex: &SkillProcessMutex): Option<u8> {
        skill_process_mutex.active_skill_type
    }

    public(friend) fun set_active_skill_type(skill_process_mutex: &mut SkillProcessMutex, active_skill_type: Option<u8>) {
        if (option::is_some(&active_skill_type)) {
            assert!(infinite_sea_common::skill_type::is_valid(*option::borrow(&active_skill_type)), EInvalidEnumValue);
        };
        skill_process_mutex.active_skill_type = active_skill_type;
    }

    fun new_skill_process_mutex(
        player_id: address,
        active_skill_type: Option<u8>,
        ctx: &mut TxContext,
    ): SkillProcessMutex {
        if (option::is_some(&active_skill_type)) {
            assert!(infinite_sea_common::skill_type::is_valid(*option::borrow(&active_skill_type)), EInvalidEnumValue);
        };
        SkillProcessMutex {
            id: object::new(ctx),
            player_id,
            version: 0,
            active_skill_type,
        }
    }


    public(friend) fun create_skill_process_mutex(
        player_id: address,
        active_skill_type: Option<u8>,
        skill_process_mutex_table: &mut SkillProcessMutexTable,
        ctx: &mut TxContext,
    ): SkillProcessMutex {
        let skill_process_mutex = new_skill_process_mutex(
            player_id,
            active_skill_type,
            ctx,
        );
        asset_player_id_not_exists_then_add(player_id, skill_process_mutex_table, object::uid_to_inner(&skill_process_mutex.id));
        skill_process_mutex
    }

    public(friend) fun asset_player_id_not_exists(
        player_id: address,
        skill_process_mutex_table: &SkillProcessMutexTable,
    ) {
        assert!(!table::contains(&skill_process_mutex_table.table, player_id), EIdAlreadyExists);
    }

    fun asset_player_id_not_exists_then_add(
        player_id: address,
        skill_process_mutex_table: &mut SkillProcessMutexTable,
        id: object::ID,
    ) {
        asset_player_id_not_exists(player_id, skill_process_mutex_table);
        table::add(&mut skill_process_mutex_table.table, player_id, id);
    }

    public(friend) fun transfer_object(skill_process_mutex: SkillProcessMutex, recipient: address) {
        assert!(skill_process_mutex.version == 0, EInappropriateVersion);
        transfer::transfer(skill_process_mutex, recipient);
    }

    public(friend) fun update_version_and_transfer_object(skill_process_mutex: SkillProcessMutex, recipient: address) {
        update_object_version(&mut skill_process_mutex);
        transfer::transfer(skill_process_mutex, recipient);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(skill_process_mutex: SkillProcessMutex) {
        assert!(skill_process_mutex.version == 0, EInappropriateVersion);
        transfer::share_object(skill_process_mutex);
    }

    public(friend) fun freeze_object(skill_process_mutex: SkillProcessMutex) {
        assert!(skill_process_mutex.version == 0, EInappropriateVersion);
        transfer::freeze_object(skill_process_mutex);
    }

    public(friend) fun update_version_and_freeze_object(skill_process_mutex: SkillProcessMutex) {
        update_object_version(&mut skill_process_mutex);
        transfer::freeze_object(skill_process_mutex);
    }

    fun update_object_version(skill_process_mutex: &mut SkillProcessMutex) {
        skill_process_mutex.version = skill_process_mutex.version + 1;
        //assert!(skill_process_mutex.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_skill_process_mutex(skill_process_mutex: SkillProcessMutex) {
        let SkillProcessMutex {
            id,
            player_id: _player_id,
            version: _version,
            active_skill_type: _active_skill_type,
        } = skill_process_mutex;
        object::delete(id);
    }

    #[test_only]
    /// Wrapper of module initializer for testing
    public fun test_init(ctx: &mut TxContext) {
        init(ctx)
    }

}
