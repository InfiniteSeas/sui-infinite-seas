// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea::map {
    use infinite_sea::map_location::{Self, MapLocation};
    use infinite_sea_common::coordinates::Coordinates;
    use sui::event;
    use sui::object::{Self, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;

    struct MAP has drop {}

    friend infinite_sea::map_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;
    const EIdNotFound: u64 = 111;

    fun init(otw: MAP, ctx: &mut TxContext) {
        let map = new_map(
            otw,
            ctx,
        );
        event::emit(new_init_map_event(&map));
        share_object(map);
    }

    struct Map has key {
        id: UID,
        version: u64,
        locations: table::Table<Coordinates, MapLocation>,
    }

    public fun id(map: &Map): object::ID {
        object::uid_to_inner(&map.id)
    }

    public fun version(map: &Map): u64 {
        map.version
    }

    public(friend) fun add_location(map: &mut Map, location: MapLocation) {
        let key = map_location::coordinates(&location);
        assert!(!table::contains(&map.locations, key), EIdAlreadyExists);
        table::add(&mut map.locations, key, location);
    }

    public(friend) fun remove_location(map: &mut Map, coordinates: Coordinates) {
        assert!(table::contains(&map.locations, coordinates), EIdNotFound);
        let location = table::remove(&mut map.locations, coordinates);
        map_location::drop_map_location(location);
    }

    public(friend) fun borrow_mut_location(map: &mut Map, coordinates: Coordinates): &mut MapLocation {
        table::borrow_mut(&mut map.locations, coordinates)
    }

    public fun borrow_location(map: &Map, coordinates: Coordinates): &MapLocation {
        table::borrow(&map.locations, coordinates)
    }

    public fun locations_contains(map: &Map, coordinates: Coordinates): bool {
        table::contains(&map.locations, coordinates)
    }

    public fun locations_length(map: &Map): u64 {
        table::length(&map.locations)
    }

    public(friend) fun new_map(
        _witness: MAP,
        ctx: &mut TxContext,
    ): Map {
        Map {
            id: object::new(ctx),
            version: 0,
            locations: table::new<Coordinates, MapLocation>(ctx),
        }
    }

    struct InitMapEvent has copy, drop {
        id: object::ID,
    }

    public fun init_map_event_id(init_map_event: &InitMapEvent): object::ID {
        init_map_event.id
    }

    public(friend) fun new_init_map_event(
        map: &Map,
    ): InitMapEvent {
        InitMapEvent {
            id: id(map),
        }
    }


    #[lint_allow(share_owned)]
    public(friend) fun share_object(map: Map) {
        assert!(map.version == 0, EInappropriateVersion);
        transfer::share_object(map);
    }

    public(friend) fun update_object_version(map: &mut Map) {
        map.version = map.version + 1;
        //assert!(map.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_map(map: Map) {
        let Map {
            id,
            version: _version,
            locations,
        } = map;
        object::delete(id);
        table::destroy_empty(locations);
    }

}
