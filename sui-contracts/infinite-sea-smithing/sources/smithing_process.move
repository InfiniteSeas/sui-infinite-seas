// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_smithing::smithing_process {
    use std::option;
    use sui::event;
    use sui::object::{Self, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea_smithing::smithing_process_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct SmithingProcessTable has key {
        id: UID,
        table: table::Table<address, object::ID>,
    }

    struct SmithingProcessTableCreated has copy, drop {
        id: object::ID,
    }

    fun init(ctx: &mut TxContext) {
        let id_generator_table = SmithingProcessTable {
            id: object::new(ctx),
            table: table::new(ctx),
        };
        let id_generator_table_id = object::uid_to_inner(&id_generator_table.id);
        transfer::share_object(id_generator_table);
        event::emit(SmithingProcessTableCreated {
            id: id_generator_table_id,
        });
    }

    struct SmithingProcess has key {
        id: UID,
        player_id: address,
        version: u64,
        item_id: u32,
        start_time: u64,
        end_time: u64,
    }

    public fun id(smithing_process: &SmithingProcess): object::ID {
        object::uid_to_inner(&smithing_process.id)
    }

    public fun player_id(smithing_process: &SmithingProcess): address {
        smithing_process.player_id
    }

    public fun version(smithing_process: &SmithingProcess): u64 {
        smithing_process.version
    }

    public fun item_id(smithing_process: &SmithingProcess): u32 {
        smithing_process.item_id
    }

    public(friend) fun set_item_id(smithing_process: &mut SmithingProcess, item_id: u32) {
        smithing_process.item_id = item_id;
    }

    public fun start_time(smithing_process: &SmithingProcess): u64 {
        smithing_process.start_time
    }

    public(friend) fun set_start_time(smithing_process: &mut SmithingProcess, start_time: u64) {
        smithing_process.start_time = start_time;
    }

    public fun end_time(smithing_process: &SmithingProcess): u64 {
        smithing_process.end_time
    }

    public(friend) fun set_end_time(smithing_process: &mut SmithingProcess, end_time: u64) {
        smithing_process.end_time = end_time;
    }

    fun new_smithing_process(
        player_id: address,
        item_id: u32,
        start_time: u64,
        end_time: u64,
        ctx: &mut TxContext,
    ): SmithingProcess {
        SmithingProcess {
            id: object::new(ctx),
            player_id,
            version: 0,
            item_id,
            start_time,
            end_time,
        }
    }


    public(friend) fun create_smithing_process(
        player_id: address,
        item_id: u32,
        start_time: u64,
        end_time: u64,
        smithing_process_table: &mut SmithingProcessTable,
        ctx: &mut TxContext,
    ): SmithingProcess {
        let smithing_process = new_smithing_process(
            player_id,
            item_id,
            start_time,
            end_time,
            ctx,
        );
        asset_player_id_not_exists_then_add(player_id, smithing_process_table, object::uid_to_inner(&smithing_process.id));
        smithing_process
    }

    public(friend) fun asset_player_id_not_exists(
        player_id: address,
        smithing_process_table: &SmithingProcessTable,
    ) {
        assert!(!table::contains(&smithing_process_table.table, player_id), EIdAlreadyExists);
    }

    fun asset_player_id_not_exists_then_add(
        player_id: address,
        smithing_process_table: &mut SmithingProcessTable,
        id: object::ID,
    ) {
        asset_player_id_not_exists(player_id, smithing_process_table);
        table::add(&mut smithing_process_table.table, player_id, id);
    }

    public(friend) fun transfer_object(smithing_process: SmithingProcess, recipient: address) {
        assert!(smithing_process.version == 0, EInappropriateVersion);
        transfer::transfer(smithing_process, recipient);
    }

    public(friend) fun update_version_and_transfer_object(smithing_process: SmithingProcess, recipient: address) {
        update_object_version(&mut smithing_process);
        transfer::transfer(smithing_process, recipient);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(smithing_process: SmithingProcess) {
        assert!(smithing_process.version == 0, EInappropriateVersion);
        transfer::share_object(smithing_process);
    }

    public(friend) fun freeze_object(smithing_process: SmithingProcess) {
        assert!(smithing_process.version == 0, EInappropriateVersion);
        transfer::freeze_object(smithing_process);
    }

    public(friend) fun update_version_and_freeze_object(smithing_process: SmithingProcess) {
        update_object_version(&mut smithing_process);
        transfer::freeze_object(smithing_process);
    }

    fun update_object_version(smithing_process: &mut SmithingProcess) {
        smithing_process.version = smithing_process.version + 1;
        //assert!(smithing_process.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_smithing_process(smithing_process: SmithingProcess) {
        let SmithingProcess {
            id,
            player_id: _player_id,
            version: _version,
            item_id: _item_id,
            start_time: _start_time,
            end_time: _end_time,
        } = smithing_process;
        object::delete(id);
    }

    #[test_only]
    /// Wrapper of module initializer for testing
    public fun test_init(ctx: &mut TxContext) {
        init(ctx)
    }

}
