// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_mining::mining_item_creation {
    use infinite_sea_common::item_creation::ItemCreation;
    use std::option;
    use sui::event;
    use sui::object::{Self, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea_mining::mining_item_creation_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct MiningItemCreationTable has key {
        id: UID,
        table: table::Table<u32, object::ID>,
    }

    struct MiningItemCreationTableCreated has copy, drop {
        id: object::ID,
    }

    fun init(ctx: &mut TxContext) {
        let id_generator_table = MiningItemCreationTable {
            id: object::new(ctx),
            table: table::new(ctx),
        };
        let id_generator_table_id = object::uid_to_inner(&id_generator_table.id);
        transfer::share_object(id_generator_table);
        event::emit(MiningItemCreationTableCreated {
            id: id_generator_table_id,
        });
    }

    struct MiningItemCreation has key {
        id: UID,
        item_id: u32,
        version: u64,
        item_creation: ItemCreation,
    }

    public fun id(mining_item_creation: &MiningItemCreation): object::ID {
        object::uid_to_inner(&mining_item_creation.id)
    }

    public fun item_id(mining_item_creation: &MiningItemCreation): u32 {
        mining_item_creation.item_id
    }

    public fun version(mining_item_creation: &MiningItemCreation): u64 {
        mining_item_creation.version
    }

    public fun item_creation(mining_item_creation: &MiningItemCreation): ItemCreation {
        mining_item_creation.item_creation
    }

    public(friend) fun set_item_creation(mining_item_creation: &mut MiningItemCreation, item_creation: ItemCreation) {
        mining_item_creation.item_creation = item_creation;
    }

    fun new_mining_item_creation(
        item_id: u32,
        item_creation: ItemCreation,
        ctx: &mut TxContext,
    ): MiningItemCreation {
        MiningItemCreation {
            id: object::new(ctx),
            item_id,
            version: 0,
            item_creation,
        }
    }


    public(friend) fun create_mining_item_creation(
        item_id: u32,
        item_creation: ItemCreation,
        mining_item_creation_table: &mut MiningItemCreationTable,
        ctx: &mut TxContext,
    ): MiningItemCreation {
        let mining_item_creation = new_mining_item_creation(
            item_id,
            item_creation,
            ctx,
        );
        asset_item_id_not_exists_then_add(item_id, mining_item_creation_table, object::uid_to_inner(&mining_item_creation.id));
        mining_item_creation
    }

    public(friend) fun asset_item_id_not_exists(
        item_id: u32,
        mining_item_creation_table: &MiningItemCreationTable,
    ) {
        assert!(!table::contains(&mining_item_creation_table.table, item_id), EIdAlreadyExists);
    }

    fun asset_item_id_not_exists_then_add(
        item_id: u32,
        mining_item_creation_table: &mut MiningItemCreationTable,
        id: object::ID,
    ) {
        asset_item_id_not_exists(item_id, mining_item_creation_table);
        table::add(&mut mining_item_creation_table.table, item_id, id);
    }

    public(friend) fun transfer_object(mining_item_creation: MiningItemCreation, recipient: address) {
        assert!(mining_item_creation.version == 0, EInappropriateVersion);
        transfer::transfer(mining_item_creation, recipient);
    }

    public(friend) fun update_version_and_transfer_object(mining_item_creation: MiningItemCreation, recipient: address) {
        update_object_version(&mut mining_item_creation);
        transfer::transfer(mining_item_creation, recipient);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(mining_item_creation: MiningItemCreation) {
        assert!(mining_item_creation.version == 0, EInappropriateVersion);
        transfer::share_object(mining_item_creation);
    }

    public(friend) fun freeze_object(mining_item_creation: MiningItemCreation) {
        assert!(mining_item_creation.version == 0, EInappropriateVersion);
        transfer::freeze_object(mining_item_creation);
    }

    public(friend) fun update_version_and_freeze_object(mining_item_creation: MiningItemCreation) {
        update_object_version(&mut mining_item_creation);
        transfer::freeze_object(mining_item_creation);
    }

    fun update_object_version(mining_item_creation: &mut MiningItemCreation) {
        mining_item_creation.version = mining_item_creation.version + 1;
        //assert!(mining_item_creation.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_mining_item_creation(mining_item_creation: MiningItemCreation) {
        let MiningItemCreation {
            id,
            item_id: _item_id,
            version: _version,
            item_creation: _item_creation,
        } = mining_item_creation;
        object::delete(id);
    }

    #[test_only]
    /// Wrapper of module initializer for testing
    public fun test_init(ctx: &mut TxContext) {
        init(ctx)
    }

}
