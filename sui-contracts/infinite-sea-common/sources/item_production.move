// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_common::item_production {
    use infinite_sea_common::item_id_quantity_pairs::ItemIdQuantityPairs;
    use infinite_sea_common::skill_type_item_id_pair::SkillTypeItemIdPair;
    use std::option;
    use sui::event;
    use sui::object::{Self, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea_common::item_production_create_logic;
    friend infinite_sea_common::item_production_update_logic;
    friend infinite_sea_common::item_production_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct ItemProductionTable has key {
        id: UID,
        table: table::Table<SkillTypeItemIdPair, object::ID>,
    }

    struct ItemProductionTableCreated has copy, drop {
        id: object::ID,
    }

    fun init(ctx: &mut TxContext) {
        let id_generator_table = ItemProductionTable {
            id: object::new(ctx),
            table: table::new(ctx),
        };
        let id_generator_table_id = object::uid_to_inner(&id_generator_table.id);
        transfer::share_object(id_generator_table);
        event::emit(ItemProductionTableCreated {
            id: id_generator_table_id,
        });
    }

    struct ItemProduction has key {
        id: UID,
        item_production_id: SkillTypeItemIdPair,
        version: u64,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun id(item_production: &ItemProduction): object::ID {
        object::uid_to_inner(&item_production.id)
    }

    public fun item_production_id(item_production: &ItemProduction): SkillTypeItemIdPair {
        item_production.item_production_id
    }

    public fun version(item_production: &ItemProduction): u64 {
        item_production.version
    }

    public fun production_materials(item_production: &ItemProduction): ItemIdQuantityPairs {
        item_production.production_materials
    }

    public(friend) fun set_production_materials(item_production: &mut ItemProduction, production_materials: ItemIdQuantityPairs) {
        item_production.production_materials = production_materials;
    }

    public fun requirements_level(item_production: &ItemProduction): u16 {
        item_production.requirements_level
    }

    public(friend) fun set_requirements_level(item_production: &mut ItemProduction, requirements_level: u16) {
        item_production.requirements_level = requirements_level;
    }

    public fun base_quantity(item_production: &ItemProduction): u32 {
        item_production.base_quantity
    }

    public(friend) fun set_base_quantity(item_production: &mut ItemProduction, base_quantity: u32) {
        item_production.base_quantity = base_quantity;
    }

    public fun base_experience(item_production: &ItemProduction): u32 {
        item_production.base_experience
    }

    public(friend) fun set_base_experience(item_production: &mut ItemProduction, base_experience: u32) {
        item_production.base_experience = base_experience;
    }

    public fun base_creation_time(item_production: &ItemProduction): u64 {
        item_production.base_creation_time
    }

    public(friend) fun set_base_creation_time(item_production: &mut ItemProduction, base_creation_time: u64) {
        item_production.base_creation_time = base_creation_time;
    }

    public fun energy_cost(item_production: &ItemProduction): u64 {
        item_production.energy_cost
    }

    public(friend) fun set_energy_cost(item_production: &mut ItemProduction, energy_cost: u64) {
        item_production.energy_cost = energy_cost;
    }

    public fun success_rate(item_production: &ItemProduction): u16 {
        item_production.success_rate
    }

    public(friend) fun set_success_rate(item_production: &mut ItemProduction, success_rate: u16) {
        item_production.success_rate = success_rate;
    }

    fun new_item_production(
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
        ctx: &mut TxContext,
    ): ItemProduction {
        ItemProduction {
            id: object::new(ctx),
            item_production_id,
            version: 0,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }

    struct ItemProductionCreated has copy, drop {
        id: option::Option<object::ID>,
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun item_production_created_id(item_production_created: &ItemProductionCreated): option::Option<object::ID> {
        item_production_created.id
    }

    public(friend) fun set_item_production_created_id(item_production_created: &mut ItemProductionCreated, id: object::ID) {
        item_production_created.id = option::some(id);
    }

    public fun item_production_created_item_production_id(item_production_created: &ItemProductionCreated): SkillTypeItemIdPair {
        item_production_created.item_production_id
    }

    public fun item_production_created_production_materials(item_production_created: &ItemProductionCreated): ItemIdQuantityPairs {
        item_production_created.production_materials
    }

    public fun item_production_created_requirements_level(item_production_created: &ItemProductionCreated): u16 {
        item_production_created.requirements_level
    }

    public fun item_production_created_base_quantity(item_production_created: &ItemProductionCreated): u32 {
        item_production_created.base_quantity
    }

    public fun item_production_created_base_experience(item_production_created: &ItemProductionCreated): u32 {
        item_production_created.base_experience
    }

    public fun item_production_created_base_creation_time(item_production_created: &ItemProductionCreated): u64 {
        item_production_created.base_creation_time
    }

    public fun item_production_created_energy_cost(item_production_created: &ItemProductionCreated): u64 {
        item_production_created.energy_cost
    }

    public fun item_production_created_success_rate(item_production_created: &ItemProductionCreated): u16 {
        item_production_created.success_rate
    }

    public(friend) fun new_item_production_created(
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProductionCreated {
        ItemProductionCreated {
            id: option::none(),
            item_production_id,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }

    struct ItemProductionUpdated has copy, drop {
        id: object::ID,
        item_production_id: SkillTypeItemIdPair,
        version: u64,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun item_production_updated_id(item_production_updated: &ItemProductionUpdated): object::ID {
        item_production_updated.id
    }

    public fun item_production_updated_item_production_id(item_production_updated: &ItemProductionUpdated): SkillTypeItemIdPair {
        item_production_updated.item_production_id
    }

    public fun item_production_updated_production_materials(item_production_updated: &ItemProductionUpdated): ItemIdQuantityPairs {
        item_production_updated.production_materials
    }

    public fun item_production_updated_requirements_level(item_production_updated: &ItemProductionUpdated): u16 {
        item_production_updated.requirements_level
    }

    public fun item_production_updated_base_quantity(item_production_updated: &ItemProductionUpdated): u32 {
        item_production_updated.base_quantity
    }

    public fun item_production_updated_base_experience(item_production_updated: &ItemProductionUpdated): u32 {
        item_production_updated.base_experience
    }

    public fun item_production_updated_base_creation_time(item_production_updated: &ItemProductionUpdated): u64 {
        item_production_updated.base_creation_time
    }

    public fun item_production_updated_energy_cost(item_production_updated: &ItemProductionUpdated): u64 {
        item_production_updated.energy_cost
    }

    public fun item_production_updated_success_rate(item_production_updated: &ItemProductionUpdated): u16 {
        item_production_updated.success_rate
    }

    public(friend) fun new_item_production_updated(
        item_production: &ItemProduction,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProductionUpdated {
        ItemProductionUpdated {
            id: id(item_production),
            item_production_id: item_production_id(item_production),
            version: version(item_production),
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }


    public(friend) fun create_item_production(
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
        item_production_table: &mut ItemProductionTable,
        ctx: &mut TxContext,
    ): ItemProduction {
        let item_production = new_item_production(
            item_production_id,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
            ctx,
        );
        asset_item_production_id_not_exists_then_add(item_production_id, item_production_table, object::uid_to_inner(&item_production.id));
        item_production
    }

    public(friend) fun asset_item_production_id_not_exists(
        item_production_id: SkillTypeItemIdPair,
        item_production_table: &ItemProductionTable,
    ) {
        assert!(!table::contains(&item_production_table.table, item_production_id), EIdAlreadyExists);
    }

    fun asset_item_production_id_not_exists_then_add(
        item_production_id: SkillTypeItemIdPair,
        item_production_table: &mut ItemProductionTable,
        id: object::ID,
    ) {
        asset_item_production_id_not_exists(item_production_id, item_production_table);
        table::add(&mut item_production_table.table, item_production_id, id);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(item_production: ItemProduction) {
        assert!(item_production.version == 0, EInappropriateVersion);
        transfer::share_object(item_production);
    }

    public(friend) fun update_object_version(item_production: &mut ItemProduction) {
        item_production.version = item_production.version + 1;
        //assert!(item_production.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_item_production(item_production: ItemProduction) {
        let ItemProduction {
            id,
            item_production_id: _item_production_id,
            version: _version,
            production_materials: _production_materials,
            requirements_level: _requirements_level,
            base_quantity: _base_quantity,
            base_experience: _base_experience,
            base_creation_time: _base_creation_time,
            energy_cost: _energy_cost,
            success_rate: _success_rate,
        } = item_production;
        object::delete(id);
    }

    public(friend) fun emit_item_production_created(item_production_created: ItemProductionCreated) {
        assert!(std::option::is_some(&item_production_created.id), EEmptyObjectID);
        event::emit(item_production_created);
    }

    public(friend) fun emit_item_production_updated(item_production_updated: ItemProductionUpdated) {
        event::emit(item_production_updated);
    }

    #[test_only]
    /// Wrapper of module initializer for testing
    public fun test_init(ctx: &mut TxContext) {
        init(ctx)
    }

}
