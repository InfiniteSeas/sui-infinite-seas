// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_common::experience_table {
    use infinite_sea_common::experience_table_item::ExperienceTableItem;
    use sui::event;
    use sui::object::{Self, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;

    struct EXPERIENCE_TABLE has drop {}

    friend infinite_sea_common::experience_table_aggregate;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;

    fun init(otw: EXPERIENCE_TABLE, ctx: &mut TxContext) {
        let experience_table = new_experience_table(
            otw,
            ctx,
        );
        event::emit(new_init_experience_table_event(&experience_table));
        share_object(experience_table);
    }

    struct ExperienceTable has key {
        id: UID,
        version: u64,
        items: vector<ExperienceTableItem>,
    }

    public fun id(experience_table: &ExperienceTable): object::ID {
        object::uid_to_inner(&experience_table.id)
    }

    public fun version(experience_table: &ExperienceTable): u64 {
        experience_table.version
    }

    public fun borrow_items(experience_table: &ExperienceTable): &vector<ExperienceTableItem> {
        &experience_table.items
    }

    public(friend) fun borrow_mut_items(experience_table: &mut ExperienceTable): &mut vector<ExperienceTableItem> {
        &mut experience_table.items
    }

    public fun items(experience_table: &ExperienceTable): vector<ExperienceTableItem> {
        experience_table.items
    }

    public(friend) fun set_items(experience_table: &mut ExperienceTable, items: vector<ExperienceTableItem>) {
        experience_table.items = items;
    }

    public(friend) fun new_experience_table(
        _witness: EXPERIENCE_TABLE,
        ctx: &mut TxContext,
    ): ExperienceTable {
        ExperienceTable {
            id: object::new(ctx),
            version: 0,
            items: std::vector::empty(),
        }
    }

    struct InitExperienceTableEvent has copy, drop {
        id: object::ID,
    }

    public fun init_experience_table_event_id(init_experience_table_event: &InitExperienceTableEvent): object::ID {
        init_experience_table_event.id
    }

    public(friend) fun new_init_experience_table_event(
        experience_table: &ExperienceTable,
    ): InitExperienceTableEvent {
        InitExperienceTableEvent {
            id: id(experience_table),
        }
    }


    public(friend) fun transfer_object(experience_table: ExperienceTable, recipient: address) {
        assert!(experience_table.version == 0, EInappropriateVersion);
        transfer::transfer(experience_table, recipient);
    }

    public(friend) fun update_version_and_transfer_object(experience_table: ExperienceTable, recipient: address) {
        update_object_version(&mut experience_table);
        transfer::transfer(experience_table, recipient);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(experience_table: ExperienceTable) {
        assert!(experience_table.version == 0, EInappropriateVersion);
        transfer::share_object(experience_table);
    }

    public(friend) fun freeze_object(experience_table: ExperienceTable) {
        assert!(experience_table.version == 0, EInappropriateVersion);
        transfer::freeze_object(experience_table);
    }

    public(friend) fun update_version_and_freeze_object(experience_table: ExperienceTable) {
        update_object_version(&mut experience_table);
        transfer::freeze_object(experience_table);
    }

    public(friend) fun update_object_version(experience_table: &mut ExperienceTable) {
        experience_table.version = experience_table.version + 1;
        //assert!(experience_table.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_experience_table(experience_table: ExperienceTable) {
        let ExperienceTable {
            id,
            version: _version,
            items: _items,
        } = experience_table;
        object::delete(id);
    }

}
