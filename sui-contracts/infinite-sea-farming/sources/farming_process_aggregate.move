// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_farming::farming_process_aggregate {
    use infinite_sea_farming::farming_item_production::FarmingItemProduction;
    use infinite_sea_farming::farming_process;
    use infinite_sea_farming::farming_process_create_logic;
    use infinite_sea_farming::farming_process_start_logic;
    use sui::clock::Clock;
    use sui::tx_context;
    use infinite_sea_player::player::Player;

    public entry fun create(
        farming_process_table: &mut farming_process::FarmingProcessTable,
        ctx: &mut tx_context::TxContext,
    ) {
        let farming_process_created = farming_process_create_logic::verify(
            farming_process_table,
            ctx,
        );
        let farming_process = farming_process_create_logic::mutate(
            &farming_process_created,
            farming_process_table,
            ctx,
        );
        farming_process::set_farming_process_created_id(&mut farming_process_created, farming_process::id(&farming_process));
        farming_process::share_object(farming_process);
        farming_process::emit_farming_process_created(farming_process_created);
    }

    public entry fun start(
        farming_process: &mut farming_process::FarmingProcess,
        player: &mut Player,
        farming_item_production: &FarmingItemProduction,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ) {
        let farming_process_started = farming_process_start_logic::verify(
            player,
            farming_item_production,
            clock,
            farming_process,
            ctx,
        );
        farming_process_start_logic::mutate(
            &farming_process_started,
            player,
            farming_process,
            ctx,
        );
        farming_process::update_object_version(farming_process);
        farming_process::emit_farming_process_started(farming_process_started);
    }

}
