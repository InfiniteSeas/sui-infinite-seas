// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_farming::farming_item_production_aggregate {
    use infinite_sea_common::item_production::{Self, ItemProduction};
    use infinite_sea_farming::farming_item_production;
    use infinite_sea_farming::farming_item_production_create_logic;
    use std::option::Option;
    use sui::tx_context;

    public entry fun create(
        item_id: u32,
        item_production_requirements_level: u16,
        item_production_material_item_id_1: u32,
        item_production_material_quantity_1: u32,
        item_production_material_item_id_2: Option<u32>,
        item_production_material_quantity_2: Option<u32>,
        item_production_material_item_id_3: Option<u32>,
        item_production_material_quantity_3: Option<u32>,
        item_production_material_item_id_4: Option<u32>,
        item_production_material_quantity_4: Option<u32>,
        item_production_material_item_id_5: Option<u32>,
        item_production_material_quantity_5: Option<u32>,
        item_production_base_quantity: u32,
        item_production_base_experience: u32,
        item_production_base_creation_time: u64,
        item_production_energy_cost: u32,
        item_production_success_rate: u16,
        farming_item_production_table: &mut farming_item_production::FarmingItemProductionTable,
        ctx: &mut tx_context::TxContext,
    ) {
        let item_production: ItemProduction = item_production::new(
            item_production_requirements_level,
            item_production_material_item_id_1,
            item_production_material_quantity_1,
            item_production_material_item_id_2,
            item_production_material_quantity_2,
            item_production_material_item_id_3,
            item_production_material_quantity_3,
            item_production_material_item_id_4,
            item_production_material_quantity_4,
            item_production_material_item_id_5,
            item_production_material_quantity_5,
            item_production_base_quantity,
            item_production_base_experience,
            item_production_base_creation_time,
            item_production_energy_cost,
            item_production_success_rate,
        );
        let farming_item_production_created = farming_item_production_create_logic::verify(
            item_id,
            item_production,
            farming_item_production_table,
            ctx,
        );
        let farming_item_production = farming_item_production_create_logic::mutate(
            &farming_item_production_created,
            farming_item_production_table,
            ctx,
        );
        farming_item_production::set_farming_item_production_created_id(&mut farming_item_production_created, farming_item_production::id(&farming_item_production));
        farming_item_production::transfer_object(farming_item_production, tx_context::sender(ctx));
        farming_item_production::emit_farming_item_production_created(farming_item_production_created);
    }

}
