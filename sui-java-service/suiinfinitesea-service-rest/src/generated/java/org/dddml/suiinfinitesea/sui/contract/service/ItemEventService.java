// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.item.AbstractItemEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.item.ItemCreated;
import org.dddml.suiinfinitesea.sui.contract.item.ItemUpdated;
import org.dddml.suiinfinitesea.sui.contract.repository.ItemEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ItemEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ItemEventRepository itemEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractItemEvent event) {
        event.setStatus("D");
        itemEventRepository.save(event);
    }

    @Transactional
    public void pullItemCreatedEvents() {
        String packageId = getCommonSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getItemCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ItemCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ITEM_MODULE_ITEM_CREATED,
                    cursor, limit, false, ItemCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ItemCreated> eventEnvelope : eventPage.getData()) {
                    saveItemCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getItemCreatedEventNextCursor() {
        AbstractItemEvent lastEvent = itemEventRepository.findFirstItemCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveItemCreated(SuiMoveEventEnvelope<ItemCreated> eventEnvelope) {
        AbstractItemEvent.ItemCreated itemCreated = DomainBeanUtils.toItemCreated(eventEnvelope);
        if (itemEventRepository.findById(itemCreated.getItemEventId()).isPresent()) {
            return;
        }
        itemEventRepository.save(itemCreated);
    }

    @Transactional
    public void pullItemUpdatedEvents() {
        String packageId = getCommonSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getItemUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ItemUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ITEM_MODULE_ITEM_UPDATED,
                    cursor, limit, false, ItemUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ItemUpdated> eventEnvelope : eventPage.getData()) {
                    saveItemUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getItemUpdatedEventNextCursor() {
        AbstractItemEvent lastEvent = itemEventRepository.findFirstItemUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveItemUpdated(SuiMoveEventEnvelope<ItemUpdated> eventEnvelope) {
        AbstractItemEvent.ItemUpdated itemUpdated = DomainBeanUtils.toItemUpdated(eventEnvelope);
        if (itemEventRepository.findById(itemUpdated.getItemEventId()).isPresent()) {
            return;
        }
        itemEventRepository.save(itemUpdated);
    }


    private String getCommonSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.COMMON_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
