// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.ship.AbstractShipEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.ship.ShipCreated;
import org.dddml.suiinfinitesea.sui.contract.repository.ShipEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ShipEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ShipEventRepository shipEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractShipEvent event) {
        event.setEventStatus("D");
        shipEventRepository.save(event);
    }

    @Transactional
    public void pullShipCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getShipCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ShipCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SHIP_MODULE_SHIP_CREATED,
                    cursor, limit, false, ShipCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ShipCreated> eventEnvelope : eventPage.getData()) {
                    saveShipCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getShipCreatedEventNextCursor() {
        AbstractShipEvent lastEvent = shipEventRepository.findFirstShipCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveShipCreated(SuiMoveEventEnvelope<ShipCreated> eventEnvelope) {
        AbstractShipEvent.ShipCreated shipCreated = DomainBeanUtils.toShipCreated(eventEnvelope);
        if (shipEventRepository.findById(shipCreated.getShipEventId()).isPresent()) {
            return;
        }
        shipEventRepository.save(shipCreated);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
