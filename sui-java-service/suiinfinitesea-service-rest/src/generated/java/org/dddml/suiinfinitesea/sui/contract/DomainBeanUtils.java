// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.dddml.suiinfinitesea.domain.item.AbstractItemEvent;
import org.dddml.suiinfinitesea.sui.contract.item.ItemCreated;
import org.dddml.suiinfinitesea.sui.contract.item.ItemUpdated;
import org.dddml.suiinfinitesea.domain.itemcreation.AbstractItemCreationEvent;
import org.dddml.suiinfinitesea.sui.contract.itemcreation.ItemCreationCreated;
import org.dddml.suiinfinitesea.sui.contract.itemcreation.ItemCreationUpdated;
import org.dddml.suiinfinitesea.domain.itemproduction.AbstractItemProductionEvent;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionCreated;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionUpdated;
import org.dddml.suiinfinitesea.domain.player.AbstractPlayerEvent;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerCreated;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerAirdropped;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerItemsDeducted;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerExperienceAndItemsIncreased;
import org.dddml.suiinfinitesea.domain.skillprocess.AbstractSkillProcessEvent;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.SkillProcessCreated;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.MutexCreationProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.MutexCreationProcessCompleted;
import org.dddml.suiinfinitesea.domain.skillprocessmutex.AbstractSkillProcessMutexEvent;
import org.dddml.suiinfinitesea.sui.contract.skillprocessmutex.SkillProcessMutexCreated;
import org.dddml.suiinfinitesea.sui.contract.skillprocessmutex.SkillProcessMutexLocked;
import org.dddml.suiinfinitesea.sui.contract.skillprocessmutex.SkillProcessMutexUnlocked;
import org.dddml.suiinfinitesea.domain.experiencetable.AbstractExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.InitExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelAdded;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.dddml.suiinfinitesea.domain.ExperienceLevel toExperienceLevel(ExperienceLevel contractExperienceLevel) {
        if (contractExperienceLevel == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ExperienceLevel experienceLevel = new org.dddml.suiinfinitesea.domain.ExperienceLevel();
        experienceLevel.setLevel(contractExperienceLevel.getFields().getLevel());
        experienceLevel.setExperience(contractExperienceLevel.getFields().getExperience());
        experienceLevel.setDifference(contractExperienceLevel.getFields().getDifference());
        return experienceLevel;
    }

    public static org.dddml.suiinfinitesea.domain.ExperienceLevel toExperienceLevel(ExperienceLevelForEvent contractExperienceLevel) {
        if (contractExperienceLevel == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ExperienceLevel experienceLevel = new org.dddml.suiinfinitesea.domain.ExperienceLevel();
        experienceLevel.setLevel(contractExperienceLevel.getLevel());
        experienceLevel.setExperience(contractExperienceLevel.getExperience());
        experienceLevel.setDifference(contractExperienceLevel.getDifference());
        return experienceLevel;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPair toItemIdQuantityPair(ItemIdQuantityPair contractItemIdQuantityPair) {
        if (contractItemIdQuantityPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPair itemIdQuantityPair = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPair();
        itemIdQuantityPair.setItemId(contractItemIdQuantityPair.getFields().getItemId());
        itemIdQuantityPair.setQuantity(contractItemIdQuantityPair.getFields().getQuantity());
        return itemIdQuantityPair;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPair toItemIdQuantityPair(ItemIdQuantityPairForEvent contractItemIdQuantityPair) {
        if (contractItemIdQuantityPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPair itemIdQuantityPair = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPair();
        itemIdQuantityPair.setItemId(contractItemIdQuantityPair.getItemId());
        itemIdQuantityPair.setQuantity(contractItemIdQuantityPair.getQuantity());
        return itemIdQuantityPair;
    }

    public static org.dddml.suiinfinitesea.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ObjectTable objectTable = new org.dddml.suiinfinitesea.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.dddml.suiinfinitesea.domain.ProductionMaterials toProductionMaterials(ProductionMaterials contractProductionMaterials) {
        if (contractProductionMaterials == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ProductionMaterials productionMaterials = new org.dddml.suiinfinitesea.domain.ProductionMaterials();
        productionMaterials.setItems(java.util.Arrays.stream(contractProductionMaterials.getFields().getItems()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toList()));
        return productionMaterials;
    }

    public static org.dddml.suiinfinitesea.domain.ProductionMaterials toProductionMaterials(ProductionMaterialsForEvent contractProductionMaterials) {
        if (contractProductionMaterials == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ProductionMaterials productionMaterials = new org.dddml.suiinfinitesea.domain.ProductionMaterials();
        productionMaterials.setItems(java.util.Arrays.stream(contractProductionMaterials.getItems()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toList()));
        return productionMaterials;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair toSkillTypeItemIdPair(SkillTypeItemIdPair contractSkillTypeItemIdPair) {
        if (contractSkillTypeItemIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair skillTypeItemIdPair = new org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair();
        skillTypeItemIdPair.setSkillType(contractSkillTypeItemIdPair.getFields().getSkillType());
        skillTypeItemIdPair.setItemId(contractSkillTypeItemIdPair.getFields().getItemId());
        return skillTypeItemIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair toSkillTypeItemIdPair(SkillTypeItemIdPairForEvent contractSkillTypeItemIdPair) {
        if (contractSkillTypeItemIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair skillTypeItemIdPair = new org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair();
        skillTypeItemIdPair.setSkillType(contractSkillTypeItemIdPair.getSkillType());
        skillTypeItemIdPair.setItemId(contractSkillTypeItemIdPair.getItemId());
        return skillTypeItemIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair toSkillTypePlayerIdPair(SkillTypePlayerIdPair contractSkillTypePlayerIdPair) {
        if (contractSkillTypePlayerIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair skillTypePlayerIdPair = new org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair();
        skillTypePlayerIdPair.setSkillType(contractSkillTypePlayerIdPair.getFields().getSkillType());
        skillTypePlayerIdPair.setPlayerId(contractSkillTypePlayerIdPair.getFields().getPlayerId());
        return skillTypePlayerIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair toSkillTypePlayerIdPair(SkillTypePlayerIdPairForEvent contractSkillTypePlayerIdPair) {
        if (contractSkillTypePlayerIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair skillTypePlayerIdPair = new org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair();
        skillTypePlayerIdPair.setSkillType(contractSkillTypePlayerIdPair.getSkillType());
        skillTypePlayerIdPair.setPlayerId(contractSkillTypePlayerIdPair.getPlayerId());
        return skillTypePlayerIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.Table table = new org.dddml.suiinfinitesea.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractItemEvent.ItemCreated toItemCreated(SuiMoveEventEnvelope<ItemCreated> eventEnvelope) {
        ItemCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemEvent.ItemCreated itemCreated = new AbstractItemEvent.ItemCreated();
        itemCreated.setId_(contractEvent.getId());
        itemCreated.setItemId(contractEvent.getItemId());
        itemCreated.setName(contractEvent.getName());
        itemCreated.setRequiredForCompletion(contractEvent.getRequiredForCompletion());
        itemCreated.setSellsFor(contractEvent.getSellsFor());
        itemCreated.setVersion(BigInteger.valueOf(-1));

        itemCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemCreated.setSuiPackageId(eventEnvelope.getPackageId());
        itemCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemCreated.setSuiSender(eventEnvelope.getSender());

        return itemCreated;
    }

    public static AbstractItemEvent.ItemUpdated toItemUpdated(SuiMoveEventEnvelope<ItemUpdated> eventEnvelope) {
        ItemUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemEvent.ItemUpdated itemUpdated = new AbstractItemEvent.ItemUpdated();
        itemUpdated.setId_(contractEvent.getId());
        itemUpdated.setItemId(contractEvent.getItemId());
        itemUpdated.setName(contractEvent.getName());
        itemUpdated.setRequiredForCompletion(contractEvent.getRequiredForCompletion());
        itemUpdated.setSellsFor(contractEvent.getSellsFor());
        itemUpdated.setVersion(contractEvent.getVersion());

        itemUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        itemUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemUpdated.setSuiSender(eventEnvelope.getSender());

        return itemUpdated;
    }

    public static AbstractItemCreationEvent.ItemCreationCreated toItemCreationCreated(SuiMoveEventEnvelope<ItemCreationCreated> eventEnvelope) {
        ItemCreationCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemCreationEvent.ItemCreationCreated itemCreationCreated = new AbstractItemCreationEvent.ItemCreationCreated();
        itemCreationCreated.setId_(contractEvent.getId());
        itemCreationCreated.setItemCreationId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemCreationId()));
        itemCreationCreated.setResourceCost(contractEvent.getResourceCost());
        itemCreationCreated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemCreationCreated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemCreationCreated.setBaseExperience(contractEvent.getBaseExperience());
        itemCreationCreated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemCreationCreated.setEnergyCost(contractEvent.getEnergyCost());
        itemCreationCreated.setSuccessRate(contractEvent.getSuccessRate());
        itemCreationCreated.setVersion(BigInteger.valueOf(-1));

        itemCreationCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemCreationCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemCreationCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemCreationCreated.setSuiPackageId(eventEnvelope.getPackageId());
        itemCreationCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemCreationCreated.setSuiSender(eventEnvelope.getSender());

        return itemCreationCreated;
    }

    public static AbstractItemCreationEvent.ItemCreationUpdated toItemCreationUpdated(SuiMoveEventEnvelope<ItemCreationUpdated> eventEnvelope) {
        ItemCreationUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemCreationEvent.ItemCreationUpdated itemCreationUpdated = new AbstractItemCreationEvent.ItemCreationUpdated();
        itemCreationUpdated.setId_(contractEvent.getId());
        itemCreationUpdated.setItemCreationId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemCreationId()));
        itemCreationUpdated.setResourceCost(contractEvent.getResourceCost());
        itemCreationUpdated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemCreationUpdated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemCreationUpdated.setBaseExperience(contractEvent.getBaseExperience());
        itemCreationUpdated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemCreationUpdated.setEnergyCost(contractEvent.getEnergyCost());
        itemCreationUpdated.setSuccessRate(contractEvent.getSuccessRate());
        itemCreationUpdated.setVersion(contractEvent.getVersion());

        itemCreationUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemCreationUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemCreationUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemCreationUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        itemCreationUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemCreationUpdated.setSuiSender(eventEnvelope.getSender());

        return itemCreationUpdated;
    }

    public static AbstractItemProductionEvent.ItemProductionCreated toItemProductionCreated(SuiMoveEventEnvelope<ItemProductionCreated> eventEnvelope) {
        ItemProductionCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemProductionEvent.ItemProductionCreated itemProductionCreated = new AbstractItemProductionEvent.ItemProductionCreated();
        itemProductionCreated.setId_(contractEvent.getId());
        itemProductionCreated.setItemProductionId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemProductionId()));
        itemProductionCreated.setProductionMaterials(DomainBeanUtils.toProductionMaterials(contractEvent.getProductionMaterials()));
        itemProductionCreated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemProductionCreated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemProductionCreated.setBaseExperience(contractEvent.getBaseExperience());
        itemProductionCreated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemProductionCreated.setEnergyCost(contractEvent.getEnergyCost());
        itemProductionCreated.setSuccessRate(contractEvent.getSuccessRate());
        itemProductionCreated.setVersion(BigInteger.valueOf(-1));

        itemProductionCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemProductionCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemProductionCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemProductionCreated.setSuiPackageId(eventEnvelope.getPackageId());
        itemProductionCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemProductionCreated.setSuiSender(eventEnvelope.getSender());

        return itemProductionCreated;
    }

    public static AbstractItemProductionEvent.ItemProductionUpdated toItemProductionUpdated(SuiMoveEventEnvelope<ItemProductionUpdated> eventEnvelope) {
        ItemProductionUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractItemProductionEvent.ItemProductionUpdated itemProductionUpdated = new AbstractItemProductionEvent.ItemProductionUpdated();
        itemProductionUpdated.setId_(contractEvent.getId());
        itemProductionUpdated.setItemProductionId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemProductionId()));
        itemProductionUpdated.setProductionMaterials(DomainBeanUtils.toProductionMaterials(contractEvent.getProductionMaterials()));
        itemProductionUpdated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemProductionUpdated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemProductionUpdated.setBaseExperience(contractEvent.getBaseExperience());
        itemProductionUpdated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemProductionUpdated.setEnergyCost(contractEvent.getEnergyCost());
        itemProductionUpdated.setSuccessRate(contractEvent.getSuccessRate());
        itemProductionUpdated.setVersion(contractEvent.getVersion());

        itemProductionUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        itemProductionUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        itemProductionUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        itemProductionUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        itemProductionUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        itemProductionUpdated.setSuiSender(eventEnvelope.getSender());

        return itemProductionUpdated;
    }

    public static AbstractPlayerEvent.PlayerCreated toPlayerCreated(SuiMoveEventEnvelope<PlayerCreated> eventEnvelope) {
        PlayerCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractPlayerEvent.PlayerCreated playerCreated = new AbstractPlayerEvent.PlayerCreated();
        playerCreated.setId(contractEvent.getId());
        playerCreated.setOwner(contractEvent.getOwner());
        playerCreated.setVersion(BigInteger.valueOf(-1));

        playerCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        playerCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        playerCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        playerCreated.setSuiPackageId(eventEnvelope.getPackageId());
        playerCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        playerCreated.setSuiSender(eventEnvelope.getSender());

        return playerCreated;
    }

    public static AbstractPlayerEvent.PlayerAirdropped toPlayerAirdropped(SuiMoveEventEnvelope<PlayerAirdropped> eventEnvelope) {
        PlayerAirdropped contractEvent = eventEnvelope.getParsedJson();

        AbstractPlayerEvent.PlayerAirdropped playerAirdropped = new AbstractPlayerEvent.PlayerAirdropped();
        playerAirdropped.setId(contractEvent.getId());
        playerAirdropped.setItemId(contractEvent.getItemId());
        playerAirdropped.setQuantity(contractEvent.getQuantity());
        playerAirdropped.setVersion(contractEvent.getVersion());

        playerAirdropped.setSuiTimestamp(eventEnvelope.getTimestampMs());
        playerAirdropped.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        playerAirdropped.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        playerAirdropped.setSuiPackageId(eventEnvelope.getPackageId());
        playerAirdropped.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        playerAirdropped.setSuiSender(eventEnvelope.getSender());

        return playerAirdropped;
    }

    public static AbstractPlayerEvent.PlayerItemsDeducted toPlayerItemsDeducted(SuiMoveEventEnvelope<PlayerItemsDeducted> eventEnvelope) {
        PlayerItemsDeducted contractEvent = eventEnvelope.getParsedJson();

        AbstractPlayerEvent.PlayerItemsDeducted playerItemsDeducted = new AbstractPlayerEvent.PlayerItemsDeducted();
        playerItemsDeducted.setId(contractEvent.getId());
        playerItemsDeducted.setItems(java.util.Arrays.stream(contractEvent.getItems()).map(DomainBeanUtils::toItemIdQuantityPair).toArray(org.dddml.suiinfinitesea.domain.ItemIdQuantityPair[]::new));
        playerItemsDeducted.setVersion(contractEvent.getVersion());

        playerItemsDeducted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        playerItemsDeducted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        playerItemsDeducted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        playerItemsDeducted.setSuiPackageId(eventEnvelope.getPackageId());
        playerItemsDeducted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        playerItemsDeducted.setSuiSender(eventEnvelope.getSender());

        return playerItemsDeducted;
    }

    public static AbstractPlayerEvent.PlayerExperienceAndItemsIncreased toPlayerExperienceAndItemsIncreased(SuiMoveEventEnvelope<PlayerExperienceAndItemsIncreased> eventEnvelope) {
        PlayerExperienceAndItemsIncreased contractEvent = eventEnvelope.getParsedJson();

        AbstractPlayerEvent.PlayerExperienceAndItemsIncreased playerExperienceAndItemsIncreased = new AbstractPlayerEvent.PlayerExperienceAndItemsIncreased();
        playerExperienceAndItemsIncreased.setId(contractEvent.getId());
        playerExperienceAndItemsIncreased.setExperience(contractEvent.getExperience());
        playerExperienceAndItemsIncreased.setItems(java.util.Arrays.stream(contractEvent.getItems()).map(DomainBeanUtils::toItemIdQuantityPair).toArray(org.dddml.suiinfinitesea.domain.ItemIdQuantityPair[]::new));
        playerExperienceAndItemsIncreased.setNewLevel(contractEvent.getNewLevel());
        playerExperienceAndItemsIncreased.setVersion(contractEvent.getVersion());

        playerExperienceAndItemsIncreased.setSuiTimestamp(eventEnvelope.getTimestampMs());
        playerExperienceAndItemsIncreased.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        playerExperienceAndItemsIncreased.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        playerExperienceAndItemsIncreased.setSuiPackageId(eventEnvelope.getPackageId());
        playerExperienceAndItemsIncreased.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        playerExperienceAndItemsIncreased.setSuiSender(eventEnvelope.getSender());

        return playerExperienceAndItemsIncreased;
    }

    public static AbstractSkillProcessEvent.SkillProcessCreated toSkillProcessCreated(SuiMoveEventEnvelope<SkillProcessCreated> eventEnvelope) {
        SkillProcessCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessEvent.SkillProcessCreated skillProcessCreated = new AbstractSkillProcessEvent.SkillProcessCreated();
        skillProcessCreated.setId_(contractEvent.getId());
        skillProcessCreated.setSkillProcessId(DomainBeanUtils.toSkillTypePlayerIdPair(contractEvent.getSkillProcessId()));
        skillProcessCreated.setVersion(BigInteger.valueOf(-1));

        skillProcessCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        skillProcessCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        skillProcessCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        skillProcessCreated.setSuiPackageId(eventEnvelope.getPackageId());
        skillProcessCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        skillProcessCreated.setSuiSender(eventEnvelope.getSender());

        return skillProcessCreated;
    }

    public static AbstractSkillProcessEvent.ProductionProcessStarted toProductionProcessStarted(SuiMoveEventEnvelope<ProductionProcessStarted> eventEnvelope) {
        ProductionProcessStarted contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessEvent.ProductionProcessStarted productionProcessStarted = new AbstractSkillProcessEvent.ProductionProcessStarted();
        productionProcessStarted.setId_(contractEvent.getId());
        productionProcessStarted.setSkillProcessId(DomainBeanUtils.toSkillTypePlayerIdPair(contractEvent.getSkillProcessId()));
        productionProcessStarted.setItemId(contractEvent.getItemId());
        productionProcessStarted.setEnergyCost(contractEvent.getEnergyCost());
        productionProcessStarted.setStartedAt(contractEvent.getStartedAt());
        productionProcessStarted.setCreationTime(contractEvent.getCreationTime());
        productionProcessStarted.setProductionMaterials(DomainBeanUtils.toProductionMaterials(contractEvent.getProductionMaterials()));
        productionProcessStarted.setVersion(contractEvent.getVersion());

        productionProcessStarted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        productionProcessStarted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        productionProcessStarted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        productionProcessStarted.setSuiPackageId(eventEnvelope.getPackageId());
        productionProcessStarted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        productionProcessStarted.setSuiSender(eventEnvelope.getSender());

        return productionProcessStarted;
    }

    public static AbstractSkillProcessEvent.ProductionProcessCompleted toProductionProcessCompleted(SuiMoveEventEnvelope<ProductionProcessCompleted> eventEnvelope) {
        ProductionProcessCompleted contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessEvent.ProductionProcessCompleted productionProcessCompleted = new AbstractSkillProcessEvent.ProductionProcessCompleted();
        productionProcessCompleted.setId_(contractEvent.getId());
        productionProcessCompleted.setSkillProcessId(DomainBeanUtils.toSkillTypePlayerIdPair(contractEvent.getSkillProcessId()));
        productionProcessCompleted.setItemId(contractEvent.getItemId());
        productionProcessCompleted.setStartedAt(contractEvent.getStartedAt());
        productionProcessCompleted.setCreationTime(contractEvent.getCreationTime());
        productionProcessCompleted.setEndedAt(contractEvent.getEndedAt());
        productionProcessCompleted.setSuccessful(contractEvent.getSuccessful());
        productionProcessCompleted.setQuantity(contractEvent.getQuantity());
        productionProcessCompleted.setExperience(contractEvent.getExperience());
        productionProcessCompleted.setNewLevel(contractEvent.getNewLevel());
        productionProcessCompleted.setVersion(contractEvent.getVersion());

        productionProcessCompleted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        productionProcessCompleted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        productionProcessCompleted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        productionProcessCompleted.setSuiPackageId(eventEnvelope.getPackageId());
        productionProcessCompleted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        productionProcessCompleted.setSuiSender(eventEnvelope.getSender());

        return productionProcessCompleted;
    }

    public static AbstractSkillProcessEvent.MutexCreationProcessStarted toMutexCreationProcessStarted(SuiMoveEventEnvelope<MutexCreationProcessStarted> eventEnvelope) {
        MutexCreationProcessStarted contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessEvent.MutexCreationProcessStarted mutexCreationProcessStarted = new AbstractSkillProcessEvent.MutexCreationProcessStarted();
        mutexCreationProcessStarted.setId_(contractEvent.getId());
        mutexCreationProcessStarted.setSkillProcessId(DomainBeanUtils.toSkillTypePlayerIdPair(contractEvent.getSkillProcessId()));
        mutexCreationProcessStarted.setItemId(contractEvent.getItemId());
        mutexCreationProcessStarted.setEnergyCost(contractEvent.getEnergyCost());
        mutexCreationProcessStarted.setResourceCost(contractEvent.getResourceCost());
        mutexCreationProcessStarted.setStartedAt(contractEvent.getStartedAt());
        mutexCreationProcessStarted.setCreationTime(contractEvent.getCreationTime());
        mutexCreationProcessStarted.setVersion(contractEvent.getVersion());

        mutexCreationProcessStarted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        mutexCreationProcessStarted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        mutexCreationProcessStarted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        mutexCreationProcessStarted.setSuiPackageId(eventEnvelope.getPackageId());
        mutexCreationProcessStarted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        mutexCreationProcessStarted.setSuiSender(eventEnvelope.getSender());

        return mutexCreationProcessStarted;
    }

    public static AbstractSkillProcessEvent.MutexCreationProcessCompleted toMutexCreationProcessCompleted(SuiMoveEventEnvelope<MutexCreationProcessCompleted> eventEnvelope) {
        MutexCreationProcessCompleted contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessEvent.MutexCreationProcessCompleted mutexCreationProcessCompleted = new AbstractSkillProcessEvent.MutexCreationProcessCompleted();
        mutexCreationProcessCompleted.setId_(contractEvent.getId());
        mutexCreationProcessCompleted.setSkillProcessId(DomainBeanUtils.toSkillTypePlayerIdPair(contractEvent.getSkillProcessId()));
        mutexCreationProcessCompleted.setItemId(contractEvent.getItemId());
        mutexCreationProcessCompleted.setStartedAt(contractEvent.getStartedAt());
        mutexCreationProcessCompleted.setCreationTime(contractEvent.getCreationTime());
        mutexCreationProcessCompleted.setEndedAt(contractEvent.getEndedAt());
        mutexCreationProcessCompleted.setSuccessful(contractEvent.getSuccessful());
        mutexCreationProcessCompleted.setQuantity(contractEvent.getQuantity());
        mutexCreationProcessCompleted.setExperience(contractEvent.getExperience());
        mutexCreationProcessCompleted.setNewLevel(contractEvent.getNewLevel());
        mutexCreationProcessCompleted.setVersion(contractEvent.getVersion());

        mutexCreationProcessCompleted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        mutexCreationProcessCompleted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        mutexCreationProcessCompleted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        mutexCreationProcessCompleted.setSuiPackageId(eventEnvelope.getPackageId());
        mutexCreationProcessCompleted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        mutexCreationProcessCompleted.setSuiSender(eventEnvelope.getSender());

        return mutexCreationProcessCompleted;
    }

    public static AbstractSkillProcessMutexEvent.SkillProcessMutexCreated toSkillProcessMutexCreated(SuiMoveEventEnvelope<SkillProcessMutexCreated> eventEnvelope) {
        SkillProcessMutexCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessMutexEvent.SkillProcessMutexCreated skillProcessMutexCreated = new AbstractSkillProcessMutexEvent.SkillProcessMutexCreated();
        skillProcessMutexCreated.setId_(contractEvent.getId());
        skillProcessMutexCreated.setPlayerId(contractEvent.getPlayerId());
        skillProcessMutexCreated.setVersion(BigInteger.valueOf(-1));

        skillProcessMutexCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        skillProcessMutexCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        skillProcessMutexCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        skillProcessMutexCreated.setSuiPackageId(eventEnvelope.getPackageId());
        skillProcessMutexCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        skillProcessMutexCreated.setSuiSender(eventEnvelope.getSender());

        return skillProcessMutexCreated;
    }

    public static AbstractSkillProcessMutexEvent.SkillProcessMutexLocked toSkillProcessMutexLocked(SuiMoveEventEnvelope<SkillProcessMutexLocked> eventEnvelope) {
        SkillProcessMutexLocked contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessMutexEvent.SkillProcessMutexLocked skillProcessMutexLocked = new AbstractSkillProcessMutexEvent.SkillProcessMutexLocked();
        skillProcessMutexLocked.setId_(contractEvent.getId());
        skillProcessMutexLocked.setPlayerId(contractEvent.getPlayerId());
        skillProcessMutexLocked.setSkillType(contractEvent.getSkillType());
        skillProcessMutexLocked.setVersion(contractEvent.getVersion());

        skillProcessMutexLocked.setSuiTimestamp(eventEnvelope.getTimestampMs());
        skillProcessMutexLocked.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        skillProcessMutexLocked.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        skillProcessMutexLocked.setSuiPackageId(eventEnvelope.getPackageId());
        skillProcessMutexLocked.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        skillProcessMutexLocked.setSuiSender(eventEnvelope.getSender());

        return skillProcessMutexLocked;
    }

    public static AbstractSkillProcessMutexEvent.SkillProcessMutexUnlocked toSkillProcessMutexUnlocked(SuiMoveEventEnvelope<SkillProcessMutexUnlocked> eventEnvelope) {
        SkillProcessMutexUnlocked contractEvent = eventEnvelope.getParsedJson();

        AbstractSkillProcessMutexEvent.SkillProcessMutexUnlocked skillProcessMutexUnlocked = new AbstractSkillProcessMutexEvent.SkillProcessMutexUnlocked();
        skillProcessMutexUnlocked.setId_(contractEvent.getId());
        skillProcessMutexUnlocked.setPlayerId(contractEvent.getPlayerId());
        skillProcessMutexUnlocked.setSkillType(contractEvent.getSkillType());
        skillProcessMutexUnlocked.setVersion(contractEvent.getVersion());

        skillProcessMutexUnlocked.setSuiTimestamp(eventEnvelope.getTimestampMs());
        skillProcessMutexUnlocked.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        skillProcessMutexUnlocked.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        skillProcessMutexUnlocked.setSuiPackageId(eventEnvelope.getPackageId());
        skillProcessMutexUnlocked.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        skillProcessMutexUnlocked.setSuiSender(eventEnvelope.getSender());

        return skillProcessMutexUnlocked;
    }

    public static AbstractExperienceTableEvent.InitExperienceTableEvent toInitExperienceTableEvent(SuiMoveEventEnvelope<InitExperienceTableEvent> eventEnvelope) {
        InitExperienceTableEvent contractEvent = eventEnvelope.getParsedJson();

        AbstractExperienceTableEvent.InitExperienceTableEvent initExperienceTableEvent = new AbstractExperienceTableEvent.InitExperienceTableEvent();
        initExperienceTableEvent.setId(contractEvent.getId());
        initExperienceTableEvent.setVersion(BigInteger.valueOf(-1));

        initExperienceTableEvent.setSuiTimestamp(eventEnvelope.getTimestampMs());
        initExperienceTableEvent.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        initExperienceTableEvent.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        initExperienceTableEvent.setSuiPackageId(eventEnvelope.getPackageId());
        initExperienceTableEvent.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        initExperienceTableEvent.setSuiSender(eventEnvelope.getSender());

        return initExperienceTableEvent;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelAdded toExperienceLevelAdded(SuiMoveEventEnvelope<ExperienceLevelAdded> eventEnvelope) {
        ExperienceLevelAdded contractEvent = eventEnvelope.getParsedJson();

        AbstractExperienceTableEvent.ExperienceLevelAdded experienceLevelAdded = new AbstractExperienceTableEvent.ExperienceLevelAdded();
        experienceLevelAdded.setId(contractEvent.getId());
        experienceLevelAdded.setLevel(contractEvent.getLevel());
        experienceLevelAdded.setExperience(contractEvent.getExperience());
        experienceLevelAdded.setDifference(contractEvent.getDifference());
        experienceLevelAdded.setVersion(contractEvent.getVersion());

        experienceLevelAdded.setSuiTimestamp(eventEnvelope.getTimestampMs());
        experienceLevelAdded.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        experienceLevelAdded.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        experienceLevelAdded.setSuiPackageId(eventEnvelope.getPackageId());
        experienceLevelAdded.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        experienceLevelAdded.setSuiSender(eventEnvelope.getSender());

        return experienceLevelAdded;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelUpdated toExperienceLevelUpdated(SuiMoveEventEnvelope<ExperienceLevelUpdated> eventEnvelope) {
        ExperienceLevelUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractExperienceTableEvent.ExperienceLevelUpdated experienceLevelUpdated = new AbstractExperienceTableEvent.ExperienceLevelUpdated();
        experienceLevelUpdated.setId(contractEvent.getId());
        experienceLevelUpdated.setLevel(contractEvent.getLevel());
        experienceLevelUpdated.setExperience(contractEvent.getExperience());
        experienceLevelUpdated.setDifference(contractEvent.getDifference());
        experienceLevelUpdated.setVersion(contractEvent.getVersion());

        experienceLevelUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        experienceLevelUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        experienceLevelUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        experienceLevelUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        experienceLevelUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        experienceLevelUpdated.setSuiSender(eventEnvelope.getSender());

        return experienceLevelUpdated;
    }


    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
