// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.itemproduction.AbstractItemProductionEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionCreated;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionUpdated;
import org.dddml.suiinfinitesea.sui.contract.repository.ItemProductionEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ItemProductionEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ItemProductionEventRepository itemProductionEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractItemProductionEvent event) {
        event.setEventStatus("D");
        itemProductionEventRepository.save(event);
    }

    @Transactional
    public void pullItemProductionCreatedEvents() {
        String packageId = getCommonSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getItemProductionCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ItemProductionCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ITEM_PRODUCTION_MODULE_ITEM_PRODUCTION_CREATED,
                    cursor, limit, false, ItemProductionCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ItemProductionCreated> eventEnvelope : eventPage.getData()) {
                    saveItemProductionCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getItemProductionCreatedEventNextCursor() {
        AbstractItemProductionEvent lastEvent = itemProductionEventRepository.findFirstItemProductionCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveItemProductionCreated(SuiMoveEventEnvelope<ItemProductionCreated> eventEnvelope) {
        AbstractItemProductionEvent.ItemProductionCreated itemProductionCreated = DomainBeanUtils.toItemProductionCreated(eventEnvelope);
        if (itemProductionEventRepository.findById(itemProductionCreated.getItemProductionEventId()).isPresent()) {
            return;
        }
        itemProductionEventRepository.save(itemProductionCreated);
    }

    @Transactional
    public void pullItemProductionUpdatedEvents() {
        String packageId = getCommonSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getItemProductionUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ItemProductionUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ITEM_PRODUCTION_MODULE_ITEM_PRODUCTION_UPDATED,
                    cursor, limit, false, ItemProductionUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ItemProductionUpdated> eventEnvelope : eventPage.getData()) {
                    saveItemProductionUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getItemProductionUpdatedEventNextCursor() {
        AbstractItemProductionEvent lastEvent = itemProductionEventRepository.findFirstItemProductionUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveItemProductionUpdated(SuiMoveEventEnvelope<ItemProductionUpdated> eventEnvelope) {
        AbstractItemProductionEvent.ItemProductionUpdated itemProductionUpdated = DomainBeanUtils.toItemProductionUpdated(eventEnvelope);
        if (itemProductionEventRepository.findById(itemProductionUpdated.getItemProductionEventId()).isPresent()) {
            return;
        }
        itemProductionEventRepository.save(itemProductionUpdated);
    }


    private String getCommonSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.COMMON_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
