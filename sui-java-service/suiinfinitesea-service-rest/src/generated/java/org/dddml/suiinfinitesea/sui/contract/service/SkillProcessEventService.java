// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.skillprocess.AbstractSkillProcessEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.SkillProcessCreated;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ShipProductionProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ShipProductionProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.CreationProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.CreationProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.repository.SkillProcessEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class SkillProcessEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private SkillProcessEventRepository skillProcessEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractSkillProcessEvent event) {
        event.setEventStatus("D");
        skillProcessEventRepository.save(event);
    }

    @Transactional
    public void pullSkillProcessCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getSkillProcessCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<SkillProcessCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_SKILL_PROCESS_CREATED,
                    cursor, limit, false, SkillProcessCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<SkillProcessCreated> eventEnvelope : eventPage.getData()) {
                    saveSkillProcessCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getSkillProcessCreatedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstSkillProcessCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveSkillProcessCreated(SuiMoveEventEnvelope<SkillProcessCreated> eventEnvelope) {
        AbstractSkillProcessEvent.SkillProcessCreated skillProcessCreated = DomainBeanUtils.toSkillProcessCreated(eventEnvelope);
        if (skillProcessEventRepository.findById(skillProcessCreated.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(skillProcessCreated);
    }

    @Transactional
    public void pullProductionProcessStartedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProductionProcessStartedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProductionProcessStarted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_PRODUCTION_PROCESS_STARTED,
                    cursor, limit, false, ProductionProcessStarted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProductionProcessStarted> eventEnvelope : eventPage.getData()) {
                    saveProductionProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProductionProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstProductionProcessStartedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProductionProcessStarted(SuiMoveEventEnvelope<ProductionProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.ProductionProcessStarted productionProcessStarted = DomainBeanUtils.toProductionProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(productionProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(productionProcessStarted);
    }

    @Transactional
    public void pullProductionProcessCompletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProductionProcessCompletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProductionProcessCompleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_PRODUCTION_PROCESS_COMPLETED,
                    cursor, limit, false, ProductionProcessCompleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProductionProcessCompleted> eventEnvelope : eventPage.getData()) {
                    saveProductionProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProductionProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstProductionProcessCompletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProductionProcessCompleted(SuiMoveEventEnvelope<ProductionProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.ProductionProcessCompleted productionProcessCompleted = DomainBeanUtils.toProductionProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(productionProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(productionProcessCompleted);
    }

    @Transactional
    public void pullShipProductionProcessStartedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getShipProductionProcessStartedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ShipProductionProcessStarted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_SHIP_PRODUCTION_PROCESS_STARTED,
                    cursor, limit, false, ShipProductionProcessStarted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ShipProductionProcessStarted> eventEnvelope : eventPage.getData()) {
                    saveShipProductionProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getShipProductionProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstShipProductionProcessStartedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveShipProductionProcessStarted(SuiMoveEventEnvelope<ShipProductionProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.ShipProductionProcessStarted shipProductionProcessStarted = DomainBeanUtils.toShipProductionProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(shipProductionProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(shipProductionProcessStarted);
    }

    @Transactional
    public void pullShipProductionProcessCompletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getShipProductionProcessCompletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ShipProductionProcessCompleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_SHIP_PRODUCTION_PROCESS_COMPLETED,
                    cursor, limit, false, ShipProductionProcessCompleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ShipProductionProcessCompleted> eventEnvelope : eventPage.getData()) {
                    saveShipProductionProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getShipProductionProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstShipProductionProcessCompletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveShipProductionProcessCompleted(SuiMoveEventEnvelope<ShipProductionProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.ShipProductionProcessCompleted shipProductionProcessCompleted = DomainBeanUtils.toShipProductionProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(shipProductionProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(shipProductionProcessCompleted);
    }

    @Transactional
    public void pullCreationProcessStartedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getCreationProcessStartedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<CreationProcessStarted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_CREATION_PROCESS_STARTED,
                    cursor, limit, false, CreationProcessStarted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<CreationProcessStarted> eventEnvelope : eventPage.getData()) {
                    saveCreationProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getCreationProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstCreationProcessStartedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveCreationProcessStarted(SuiMoveEventEnvelope<CreationProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.CreationProcessStarted creationProcessStarted = DomainBeanUtils.toCreationProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(creationProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(creationProcessStarted);
    }

    @Transactional
    public void pullCreationProcessCompletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getCreationProcessCompletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<CreationProcessCompleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.SKILL_PROCESS_MODULE_CREATION_PROCESS_COMPLETED,
                    cursor, limit, false, CreationProcessCompleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<CreationProcessCompleted> eventEnvelope : eventPage.getData()) {
                    saveCreationProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getCreationProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent lastEvent = skillProcessEventRepository.findFirstCreationProcessCompletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveCreationProcessCompleted(SuiMoveEventEnvelope<CreationProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.CreationProcessCompleted creationProcessCompleted = DomainBeanUtils.toCreationProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(creationProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(creationProcessCompleted);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
