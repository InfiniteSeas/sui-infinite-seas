// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.shipbattle;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;


public class ShipBattleStateDto {

    private String id;

    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    private String initiator;

    public String getInitiator()
    {
        return this.initiator;
    }

    public void setInitiator(String initiator)
    {
        this.initiator = initiator;
    }

    private String responder;

    public String getResponder()
    {
        return this.responder;
    }

    public void setResponder(String responder)
    {
        this.responder = responder;
    }

    private Integer status;

    public Integer getStatus()
    {
        return this.status;
    }

    public void setStatus(Integer status)
    {
        this.status = status;
    }

    private Long roundNumber;

    public Long getRoundNumber()
    {
        return this.roundNumber;
    }

    public void setRoundNumber(Long roundNumber)
    {
        this.roundNumber = roundNumber;
    }

    private Integer roundMover;

    public Integer getRoundMover()
    {
        return this.roundMover;
    }

    public void setRoundMover(Integer roundMover)
    {
        this.roundMover = roundMover;
    }

    private BigInteger roundStartedAt;

    public BigInteger getRoundStartedAt()
    {
        return this.roundStartedAt;
    }

    public void setRoundStartedAt(BigInteger roundStartedAt)
    {
        this.roundStartedAt = roundStartedAt;
    }

    private BigInteger version;

    public BigInteger getVersion()
    {
        return this.version;
    }

    public void setVersion(BigInteger version)
    {
        this.version = version;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public ShipBattleStateDto[] toShipBattleStateDtoArray(Iterable<ShipBattleState> states) {
            return toShipBattleStateDtoList(states).toArray(new ShipBattleStateDto[0]);
        }

        public List<ShipBattleStateDto> toShipBattleStateDtoList(Iterable<ShipBattleState> states) {
            ArrayList<ShipBattleStateDto> stateDtos = new ArrayList();
            for (ShipBattleState s : states) {
                ShipBattleStateDto dto = toShipBattleStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public ShipBattleStateDto toShipBattleStateDto(ShipBattleState state)
        {
            if(state == null) {
                return null;
            }
            ShipBattleStateDto dto = new ShipBattleStateDto();
            if (returnedFieldsContains("Id")) {
                dto.setId(state.getId());
            }
            if (returnedFieldsContains("Initiator")) {
                dto.setInitiator(state.getInitiator());
            }
            if (returnedFieldsContains("Responder")) {
                dto.setResponder(state.getResponder());
            }
            if (returnedFieldsContains("Status")) {
                dto.setStatus(state.getStatus());
            }
            if (returnedFieldsContains("RoundNumber")) {
                dto.setRoundNumber(state.getRoundNumber());
            }
            if (returnedFieldsContains("RoundMover")) {
                dto.setRoundMover(state.getRoundMover());
            }
            if (returnedFieldsContains("RoundStartedAt")) {
                dto.setRoundStartedAt(state.getRoundStartedAt());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

