// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain;

import org.dddml.suiinfinitesea.specialization.ReflectUtils;
import org.dddml.suiinfinitesea.specialization.MutationContext;
import org.dddml.suiinfinitesea.specialization.VerificationContext;
import org.dddml.suiinfinitesea.domain.item.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.domain.itemcreation.*;
import org.dddml.suiinfinitesea.domain.itemproduction.*;
import org.dddml.suiinfinitesea.domain.player.*;
import org.dddml.suiinfinitesea.domain.skillprocess.*;
import org.dddml.suiinfinitesea.domain.skillprocessmutex.*;
import org.dddml.suiinfinitesea.domain.experiencetable.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.item.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemState.class, String.class, Boolean.class, Long.class, VerificationContext.class},
                    new String[]{"_", "_", "name", "requiredForCompletion", "sellsFor"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.item.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemState.class, String.class, Boolean.class, Long.class, VerificationContext.class},
                    new String[]{"_", "_", "name", "requiredForCompletion", "sellsFor"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemcreation.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemCreationState.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemcreation.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemCreationState.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemproduction.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "productionMaterials", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemproduction.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "productionMaterials", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.AirdropLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, Long.class, Long.class, VerificationContext.class},
                    new String[]{"_", "_", "itemId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.DeductItemsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, ProductionMaterial[].class, VerificationContext.class},
                    new String[]{"_", "_", "items"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.IncreaseExperienceAndItemsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, Long.class, ProductionMaterial[].class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "experience", "items", "newLevel"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocess.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, VerificationContext.class},
                    new String[]{"_", "_", "player"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocess.StartProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, VerificationContext.class},
                    new String[]{"_", "_", "player", "itemProduction"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocess.CompleteProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, VerificationContext.class},
                    new String[]{"_", "_", "player", "itemProduction", "experienceTable"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocessmutex.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessMutexState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.__Init__Logic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExperienceTableState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.AddLevelLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExperienceTableState.class, Integer.class, Long.class, Long.class, VerificationContext.class},
                    new String[]{"_", "_", "level", "experience", "difference"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.UpdateLevelLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExperienceTableState.class, Integer.class, Long.class, Long.class, VerificationContext.class},
                    new String[]{"_", "_", "level", "experience", "difference"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.item.CreateLogic",
                    "mutate",
                    new Class[]{ItemState.class, String.class, Boolean.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "requiredForCompletion", "sellsFor", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.item.UpdateLogic",
                    "mutate",
                    new Class[]{ItemState.class, String.class, Boolean.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "requiredForCompletion", "sellsFor", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemcreation.CreateLogic",
                    "mutate",
                    new Class[]{ItemCreationState.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemcreation.UpdateLogic",
                    "mutate",
                    new Class[]{ItemCreationState.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemproduction.CreateLogic",
                    "mutate",
                    new Class[]{ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productionMaterials", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.itemproduction.UpdateLogic",
                    "mutate",
                    new Class[]{ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productionMaterials", "requirementsLevel", "baseQuantity", "baseExperience", "baseCreationTime", "energyCost", "successRate", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.CreateLogic",
                    "mutate",
                    new Class[]{PlayerState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.AirdropLogic",
                    "mutate",
                    new Class[]{PlayerState.class, Long.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "itemId", "quantity", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.DeductItemsLogic",
                    "mutate",
                    new Class[]{PlayerState.class, ProductionMaterial[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "items", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.player.IncreaseExperienceAndItemsLogic",
                    "mutate",
                    new Class[]{PlayerState.class, Long.class, ProductionMaterial[].class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "experience", "items", "newLevel", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocess.CreateLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocess.CompleteProductionLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, Boolean.class, Long.class, Long.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "itemId", "startedAt", "creationTime", "endedAt", "successful", "quantity", "experience", "newLevel", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.skillprocessmutex.CreateLogic",
                    "mutate",
                    new Class[]{SkillProcessMutexState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.__Init__Logic",
                    "mutate",
                    new Class[]{ExperienceTableState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.AddLevelLogic",
                    "mutate",
                    new Class[]{ExperienceTableState.class, Integer.class, Long.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "level", "experience", "difference", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suiinfinitesea.domain.experiencetable.UpdateLevelLogic",
                    "mutate",
                    new Class[]{ExperienceTableState.class, Integer.class, Long.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "level", "experience", "difference", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );



    }

}


