// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.itemproduction;

import java.util.*;
import org.dddml.suiinfinitesea.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.specialization.*;

public abstract class AbstractItemProductionAggregate extends AbstractAggregate implements ItemProductionAggregate {
    private ItemProductionState.MutableItemProductionState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractItemProductionAggregate(ItemProductionState state) {
        this.state = (ItemProductionState.MutableItemProductionState)state;
    }

    public ItemProductionState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        ItemProductionCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleItemProductionAggregate extends AbstractItemProductionAggregate {
        public SimpleItemProductionAggregate(ItemProductionState state) {
            super(state);
        }

        @Override
        public void create(ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, Long offChainVersion, String commandId, String requesterId, ItemProductionCommands.Create c) {
            java.util.function.Supplier<ItemProductionEvent.ItemProductionCreated> eventFactory = () -> newItemProductionCreated(productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, offChainVersion, commandId, requesterId);
            ItemProductionEvent.ItemProductionCreated e;
            try {
                e = verifyCreate(eventFactory, productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void update(ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, Long offChainVersion, String commandId, String requesterId, ItemProductionCommands.Update c) {
            java.util.function.Supplier<ItemProductionEvent.ItemProductionUpdated> eventFactory = () -> newItemProductionUpdated(productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, offChainVersion, commandId, requesterId);
            ItemProductionEvent.ItemProductionUpdated e;
            try {
                e = verifyUpdate(eventFactory, productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected ItemProductionEvent.ItemProductionCreated verifyCreate(java.util.function.Supplier<ItemProductionEvent.ItemProductionCreated> eventFactory, ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, ItemProductionCommands.Create c) {
            ProductionMaterials ProductionMaterials = productionMaterials;
            Integer RequirementsLevel = requirementsLevel;
            Long BaseQuantity = baseQuantity;
            Long BaseExperience = baseExperience;
            BigInteger BaseCreationTime = baseCreationTime;
            BigInteger EnergyCost = energyCost;
            Integer SuccessRate = successRate;

            ItemProductionEvent.ItemProductionCreated e = (ItemProductionEvent.ItemProductionCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.itemproduction.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.itemproduction;
//
//public class CreateLogic {
//    public static ItemProductionEvent.ItemProductionCreated verify(java.util.function.Supplier<ItemProductionEvent.ItemProductionCreated> eventFactory, ItemProductionState itemProductionState, ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ItemProductionEvent.ItemProductionUpdated verifyUpdate(java.util.function.Supplier<ItemProductionEvent.ItemProductionUpdated> eventFactory, ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, ItemProductionCommands.Update c) {
            ProductionMaterials ProductionMaterials = productionMaterials;
            Integer RequirementsLevel = requirementsLevel;
            Long BaseQuantity = baseQuantity;
            Long BaseExperience = baseExperience;
            BigInteger BaseCreationTime = baseCreationTime;
            BigInteger EnergyCost = energyCost;
            Integer SuccessRate = successRate;

            ItemProductionEvent.ItemProductionUpdated e = (ItemProductionEvent.ItemProductionUpdated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.itemproduction.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ItemProductionState.class, ProductionMaterials.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), productionMaterials, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.itemproduction;
//
//public class UpdateLogic {
//    public static ItemProductionEvent.ItemProductionUpdated verify(java.util.function.Supplier<ItemProductionEvent.ItemProductionUpdated> eventFactory, ItemProductionState itemProductionState, ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractItemProductionEvent.ItemProductionCreated newItemProductionCreated(ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, Long offChainVersion, String commandId, String requesterId) {
            ItemProductionEventId eventId = new ItemProductionEventId(getState().getItemProductionId(), null);
            AbstractItemProductionEvent.ItemProductionCreated e = new AbstractItemProductionEvent.ItemProductionCreated();

            e.setProductionMaterials(productionMaterials);
            e.setRequirementsLevel(requirementsLevel);
            e.setBaseQuantity(baseQuantity);
            e.setBaseExperience(baseExperience);
            e.setBaseCreationTime(baseCreationTime);
            e.setEnergyCost(energyCost);
            e.setSuccessRate(successRate);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setItemProductionEventId(eventId);
            return e;
        }

        protected AbstractItemProductionEvent.ItemProductionUpdated newItemProductionUpdated(ProductionMaterials productionMaterials, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, Long offChainVersion, String commandId, String requesterId) {
            ItemProductionEventId eventId = new ItemProductionEventId(getState().getItemProductionId(), null);
            AbstractItemProductionEvent.ItemProductionUpdated e = new AbstractItemProductionEvent.ItemProductionUpdated();

            e.setProductionMaterials(productionMaterials);
            e.setRequirementsLevel(requirementsLevel);
            e.setBaseQuantity(baseQuantity);
            e.setBaseExperience(baseExperience);
            e.setBaseCreationTime(baseCreationTime);
            e.setEnergyCost(energyCost);
            e.setSuccessRate(successRate);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setItemProductionEventId(eventId);
            return e;
        }

    }

}

