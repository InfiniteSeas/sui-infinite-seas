// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.player;

import java.util.*;
import java.math.*;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.player.PlayerItemEvent.*;

public abstract class AbstractPlayerItemState implements PlayerItemState.SqlPlayerItemState {

    private PlayerItemId playerItemId = new PlayerItemId();

    public PlayerItemId getPlayerItemId() {
        return this.playerItemId;
    }

    public void setPlayerItemId(PlayerItemId playerItemId) {
        this.playerItemId = playerItemId;
    }

    private transient PlayerState playerState;

    public PlayerState getPlayerState() {
        return playerState;
    }

    public void setPlayerState(PlayerState s) {
        playerState = s;
    }
    
    private PlayerState protectedPlayerState;

    protected PlayerState getProtectedPlayerState() {
        return protectedPlayerState;
    }

    protected void setProtectedPlayerState(PlayerState protectedPlayerState) {
        this.protectedPlayerState = protectedPlayerState;
    }

    public String getPlayerId() {
        return this.getPlayerItemId().getPlayerId();
    }
        
    public void setPlayerId(String playerId) {
        this.getPlayerItemId().setPlayerId(playerId);
    }

    public Long getItemId() {
        return this.getPlayerItemId().getItemId();
    }
        
    public void setItemId(Long itemId) {
        this.getPlayerItemId().setItemId(itemId);
    }

    private Long quantity;

    public Long getQuantity() {
        return this.quantity;
    }

    public void setQuantity(Long quantity) {
        this.quantity = quantity;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractPlayerItemState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getItemId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PlayerItemState) {
            return Objects.equals(this.getItemId(), ((PlayerItemState)obj).getItemId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(PlayerItemState s) {
        if (s == this) {
            return;
        }
        this.setQuantity(s.getQuantity());
        this.setActive(s.getActive());
    }

    public void save() {
    }

    protected void throwOnWrongEvent(PlayerItemEvent event) {
        String stateEntityIdPlayerId = this.getPlayerItemId().getPlayerId();
        String eventEntityIdPlayerId = ((PlayerItemEvent.SqlPlayerItemEvent)event).getPlayerItemEventId().getPlayerId();
        if (!stateEntityIdPlayerId.equals(eventEntityIdPlayerId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PlayerId %1$s in state but entity id PlayerId %2$s in event", stateEntityIdPlayerId, eventEntityIdPlayerId);
        }

        Long stateEntityIdItemId = this.getPlayerItemId().getItemId();
        Long eventEntityIdItemId = ((PlayerItemEvent.SqlPlayerItemEvent)event).getPlayerItemEventId().getItemId();
        if (!stateEntityIdItemId.equals(eventEntityIdItemId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ItemId %1$s in state but entity id ItemId %2$s in event", stateEntityIdItemId, eventEntityIdItemId);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimplePlayerItemState extends AbstractPlayerItemState {

        public SimplePlayerItemState() {
        }

        public static SimplePlayerItemState newForReapplying() {
            SimplePlayerItemState s = new SimplePlayerItemState();
            s.initializeForReapplying();
            return s;
        }

    }



}

