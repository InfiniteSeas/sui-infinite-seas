// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.player;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.player.PlayerEvent.*;

public abstract class AbstractPlayerState implements PlayerState.SqlPlayerState, Saveable {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private String owner;

    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    private Integer level;

    public Integer getLevel() {
        return this.level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    private Long experience;

    public Long getExperience() {
        return this.experience;
    }

    public void setExperience(Long experience) {
        this.experience = experience;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<PlayerItemState> protectedItems = new HashSet<>();

    protected Set<PlayerItemState> getProtectedItems() {
        return this.protectedItems;
    }

    protected void setProtectedItems(Set<PlayerItemState> protectedItems) {
        this.protectedItems = protectedItems;
    }

    private EntityStateCollection<Long, PlayerItemState> items;

    public EntityStateCollection<Long, PlayerItemState> getItems() {
        return this.items;
    }

    public void setItems(EntityStateCollection<Long, PlayerItemState> items) {
        this.items = items;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractPlayerState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((PlayerEvent.SqlPlayerEvent) events.get(0)).getPlayerEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? PlayerState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractPlayerState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        items = new SimplePlayerItemStateCollection();
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PlayerState) {
            return Objects.equals(this.getId(), ((PlayerState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractPlayerEvent.PlayerCreated) {
            when((AbstractPlayerEvent.PlayerCreated)e);
        } else if (e instanceof AbstractPlayerEvent.PlayerAirdropped) {
            when((AbstractPlayerEvent.PlayerAirdropped)e);
        } else if (e instanceof AbstractPlayerEvent.PlayerItemsDeducted) {
            when((AbstractPlayerEvent.PlayerItemsDeducted)e);
        } else if (e instanceof AbstractPlayerEvent.PlayerExperienceAndItemsIncreased) {
            when((AbstractPlayerEvent.PlayerExperienceAndItemsIncreased)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(PlayerState s) {
        if (s == this) {
            return;
        }
        this.setOwner(s.getOwner());
        this.setLevel(s.getLevel());
        this.setExperience(s.getExperience());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());

        if (s.getItems() != null) {
            Iterable<PlayerItemState> iterable;
            if (s.getItems().isLazy()) {
                iterable = s.getItems().getLoadedStates();
            } else {
                iterable = s.getItems();
            }
            if (iterable != null) {
                for (PlayerItemState ss : iterable) {
                    PlayerItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Long, PlayerItemState>)this.getItems()).getOrAddDefault(ss.getItemId());
                    ((AbstractPlayerItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getItems() != null) {
            if (s.getItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getItems()).getRemovedStates() != null) {
                    for (PlayerItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<Long, PlayerItemState>)s.getItems()).getRemovedStates()) {
                        PlayerItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Long, PlayerItemState>)this.getItems()).getOrAddDefault(ss.getItemId());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getItems().isAllLoaded()) {
                    Set<Long> removedStateIds = new HashSet<>(this.getItems().stream().map(i -> i.getItemId()).collect(java.util.stream.Collectors.toList()));
                    s.getItems().forEach(i -> removedStateIds.remove(i.getItemId()));
                    for (Long i : removedStateIds) {
                        PlayerItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Long, PlayerItemState>)this.getItems()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(AbstractPlayerEvent.PlayerCreated e) {
        throwOnWrongEvent(e);

        String owner = e.getOwner();
        String Owner = owner;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        PlayerState updatedPlayerState = (PlayerState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.player.CreateLogic",
                    "mutate",
                    new Class[]{PlayerState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, owner, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.player;
//
//public class CreateLogic {
//    public static PlayerState mutate(PlayerState playerState, String owner, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<PlayerState, PlayerState.MutablePlayerState> mutationContext) {
//    }
//}

        if (this != updatedPlayerState) { merge(updatedPlayerState); } //else do nothing

    }

    public void when(AbstractPlayerEvent.PlayerAirdropped e) {
        throwOnWrongEvent(e);

        Long itemId = e.getItemId();
        Long ItemId = itemId;
        Long quantity = e.getQuantity();
        Long Quantity = quantity;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        PlayerState updatedPlayerState = (PlayerState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.player.AirdropLogic",
                    "mutate",
                    new Class[]{PlayerState.class, Long.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, itemId, quantity, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.player;
//
//public class AirdropLogic {
//    public static PlayerState mutate(PlayerState playerState, Long itemId, Long quantity, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<PlayerState, PlayerState.MutablePlayerState> mutationContext) {
//    }
//}

        if (this != updatedPlayerState) { merge(updatedPlayerState); } //else do nothing

    }

    public void when(AbstractPlayerEvent.PlayerItemsDeducted e) {
        throwOnWrongEvent(e);

        ItemIdQuantityPair[] items = e.getItems();
        ItemIdQuantityPair[] Items = items;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        PlayerState updatedPlayerState = (PlayerState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.player.DeductItemsLogic",
                    "mutate",
                    new Class[]{PlayerState.class, ItemIdQuantityPair[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, items, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.player;
//
//public class DeductItemsLogic {
//    public static PlayerState mutate(PlayerState playerState, ItemIdQuantityPair[] items, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<PlayerState, PlayerState.MutablePlayerState> mutationContext) {
//    }
//}

        if (this != updatedPlayerState) { merge(updatedPlayerState); } //else do nothing

    }

    public void when(AbstractPlayerEvent.PlayerExperienceAndItemsIncreased e) {
        throwOnWrongEvent(e);

        Long experience = e.getExperience();
        Long Experience = experience;
        ItemIdQuantityPair[] items = e.getItems();
        ItemIdQuantityPair[] Items = items;
        Integer newLevel = e.getNewLevel();
        Integer NewLevel = newLevel;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        PlayerState updatedPlayerState = (PlayerState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.player.IncreaseExperienceAndItemsLogic",
                    "mutate",
                    new Class[]{PlayerState.class, Long.class, ItemIdQuantityPair[].class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, experience, items, newLevel, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.player;
//
//public class IncreaseExperienceAndItemsLogic {
//    public static PlayerState mutate(PlayerState playerState, Long experience, ItemIdQuantityPair[] items, Integer newLevel, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<PlayerState, PlayerState.MutablePlayerState> mutationContext) {
//    }
//}

        if (this != updatedPlayerState) { merge(updatedPlayerState); } //else do nothing

    }

    public void save() {
        if (items instanceof Saveable) {
            ((Saveable)items).save();
        }
    }

    protected void throwOnWrongEvent(PlayerEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((PlayerEvent.SqlPlayerEvent)event).getPlayerEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimplePlayerState extends AbstractPlayerState {

        public SimplePlayerState() {
        }

        public SimplePlayerState(List<Event> events) {
            super(events);
        }

        public static SimplePlayerState newForReapplying() {
            SimplePlayerState s = new SimplePlayerState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimplePlayerItemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<Long, PlayerItemState>, Collection<PlayerItemState> {

        @Override
        public PlayerItemState get(Long itemId) {
            return protectedItems.stream().filter(
                            e -> e.getItemId().equals(itemId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<PlayerItemState> getLoadedStates() {
            return protectedItems;
        }

        @Override
        public PlayerItemState getOrAddDefault(Long itemId) {
            PlayerItemState s = get(itemId);
            if (s == null) {
                PlayerItemId globalId = new PlayerItemId(getId(), itemId);
                AbstractPlayerItemState state = new AbstractPlayerItemState.SimplePlayerItemState();
                state.setPlayerItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedItems.contains(o);
        }

        @Override
        public Iterator<PlayerItemState> iterator() {
            return protectedItems.iterator();
        }

        @Override
        public java.util.stream.Stream<PlayerItemState> stream() {
            return protectedItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedItems.toArray(a);
        }

        @Override
        public boolean add(PlayerItemState s) {
            if (s instanceof AbstractPlayerItemState) {
                AbstractPlayerItemState state = (AbstractPlayerItemState) s;
                state.setProtectedPlayerState(AbstractPlayerState.this);
            }
            return protectedItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractPlayerItemState) {
                AbstractPlayerItemState s = (AbstractPlayerItemState) o;
                s.setProtectedPlayerState(null);
            }
            return protectedItems.remove(o);
        }

        @Override
        public boolean removeState(PlayerItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedItems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends PlayerItemState> c) {
            return protectedItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedItems.clear();
        }
    }


}

